# Data Management {#sec-mt2}

---
author: 
  - name: "Gerko Vink"
    orcid: "0000-0001-9767-1924"
    email: g.vink@uu.nl
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
format:
  html:
    highlight-style: github
    number-sections: false
    toc: true
    toc-depth: 3
    code-fold: false
    code-overflow: wrap
---

::: callout-tip
## Hoorcollege 3 juni 2025
Vandaag gaan we dwars door `R` heen om ons snel bekend te maken met de onderliggende machinery van het systeem. We gaan leren hoe je data inleest in `R`, hoe je het exporteert en hoe je de data gaafmaakt voor verdere analyse. In de breedste zin zullen we vandaag al leren hoe je op een efficiente wijze dwars door environments, frames en data containers heen kunt gaan om uiteindelijk de data op een juiste manier te managen. De slides voor het hoorcollege kun u [hier vinden](slides/lec-2.html) 
:::

Vandaag beginnen we met het overgebleven deel van het werkcollege van gisteren. Als je het werkcollege van gisteren al hebt afgerond, dan kun je Practical 1 van vandaag overslaan en direct beginnen met Practical 2 en het extra practical doen.

---

## Practical 1

### Exercise 1-5

---

 1. **Make two vectors: one named `vec1` with values 1 through 6 and one named `vec2` with letters A through F. **
```{r}
vec1 <- c(1, 2, 3, 4, 5, 6)
vec2 <- c("A", "B", "C", "D", "E", "F")
```

To create a vector we used `c()`, which stands for 'concatenation'. It is just a series of numbers or letters. 

---

 2. **Create two matrices, one from `vec1` and one from `vec2`. The dimensions for both matrices are 3 rows by 2 columns. **

```{r}
mat1 <- matrix(vec1, nrow = 3, ncol = 2)
mat2 <- matrix(vec2, nrow = 3, ncol = 2)
```

To create a matrix we used `matrix()`. For a matrix we need to specify the dimensions (in this case 3 rows and 2 columns) and the input (in this case `vec1` or `vec2`) needs to match these dimensions. 

---

3. **Inspect your vectors and matrices. Are all numerical?**

```{r}
#| code-fold: false
vec1
vec2
mat1
mat2
```

`vec1` and `mat1` contain numbers and `vec2` and `mat2` contain characters. 

---

 4. **Make a matrix from both `vec1` and `vec2` with 6 rows and 2 columns. Inspect this matrix.**

```{r}
mat3 <- matrix(c(vec1, vec2), 6, 2) # specify rows and column dimensions
mat3
```
or
```{r}
mat3b <- cbind(vec1, vec2) # no dimension specification necessary
is.matrix(mat3b)
mat3b
```

If one or more elements in the matrix represent characters, all other elements are also converted to characters. A matrix is just for either numeric or character elements. Notice that the second approach (the column bind approach from `mat3b`) returns a matrix where the column names are already set to the name of the bound objects. 

To solve the problem of charactered numbers we can create a dataframe. A dataframe is essentially a matrix that allows for character elements. The use of a dataframe is often preferred over the use of a matrix in `R`, except for purposes where pure numerical calculations are done, such as in matrix algebra. However, most datasets do contain character information and a dataframe would normally be your preferred choice when working with your own collected datasets in R. 

---

5. **Make a dataframe called `dat3` where `vec1` and `vec2` are both columns. Name the columns `V1` and `V2`, respectively. Use function `data.frame()`.**

```{r}
dat3 <- data.frame(V1 = vec1, V2 = vec2)
dat3
```

---

### Exercise 6-10

---

6. **Again, make a dataframe called `dat3b` where `vec1` and `vec2` are both columns. Name the columns `V1` and `V2`, respectively. Use function `as.data.frame()` on the matrix obtained from `Question 4`. **

This is a tricky situation. At face value, everything may seem to be in order. But, be aware that the code
```{r}
dat3b <- as.data.frame(mat3, stringsAsFactors = TRUE)
dat3b
```
does not work properly (at least not as intended) as the matrix nature of `mat3` turned everything into a character value and you have lost the numerical nature of `vec1`. It may appear to be working, but if we check if column 1 is numerical, it turns out not to be the case. 

---

7. **Check if the first column in the data frames from Question 4 and Question 5 are indeed numeric. If not, determine what they are. **

```{r}
is.numeric(dat3[, 1])
is.numeric(dat3b[, 1])
```
The first column in matrix `dat3b` obtained from Question 5 is indeed not numeric. As a matter of fact, it is also not a character variable.
```{r}
is.character(dat3b[, 1])
```
Rather tricky; the function `as.data.frame()` has converted the first variable to a factor. 
```{r}
is.factor(dat3b[, 1])
```
This is due to us not specifying the variable correctly in the matrix we used to create the dataframe. Factors are categorical variables that are depicted by numbers. Character vectors are not converted to factors in data frames by default, but the argument `stringsAsFactors = TRUE` has resulted in this conversion. I forced this to prove a point: You now know that there is a distinction between characters and factors and you know hot to force this conversion to factors in a data frame. 

---

8. **Select 1) the third row, 2) the second column and 3) the intersection of these two in the dataframe `dat3` that you have created in Question 4. **
```{r}
dat3[3, ] #3rd row
dat3[, 2] #2nd column
dat3$V2   #also 2nd column
dat3[3,2] #intersection
```

The `[3,2]` index is very useful in 'R'. The first number (before the comma) represents the row and the second number (after the comma) represents the column. For a vector there are no two dimensions and only one dimension can be called. For example, `vec1[3]` would yield `3`. Try it. 

Columns can also be called by the `$` sign, but only if a name has been assigned. With dataframes assigning names happens automatically. 

Note that `R` automatically reports the values the character column can take. This means that the column is indeed a factor (a categorical variable - as it is supposed to be). A useful function to inspect the structure of a dataframe is `str()`. Try running it. 

```{r}
str(dat3)
```

Inspecting the structure of your data is vital, as you probably have imported your data from some other source. If we, at a later stage, start analyzing our data without the correct measurement level, we may run into problems. One problem that often occurs is that categorical variables (factors in `R`) are not coded as such. 

---

9. **Imagine that the first variable `V1` in our dataframe `dat3` is not coded correctly, but actually represents grouping information about cities. Convert the variable to a factor and add the labels Utrecht, New York, London, Singapore, Rome and Cape Town.** 
```{r}
dat3$V1 <- factor(dat3$V1, labels = c("Utrecht", "New York", "London", "Singapore", "Rome", "Capetown"))
dat3
```

---

## Practical 2: Pipes

We need the following packages for this part:
```{r}
library(dplyr)    # for data manipulation
library(magrittr) # for flexible pipes
library(haven)    # for importing SPSS and Stata data
library(mice)     # for the boys data
```


---

0. **Read in the SPSS and Stata data sets that are provided on Moodle. Place them in the Project folder of this practical. Use the functions `read_sav()` and `read_dta()` from package `haven`. **

```{r echo=FALSE}
# Import the SPSS data set
spss_data <- read_sav("moodle/data/SUR_2023_LAPOP_AmericasBarometer_v1.0_w_orginal.sav")
# Import the Stata data set
stata_data <- read_dta("moodle/data/03-poverty-analysis-data-2022-rt001-housing-plus.dta")
```

```{r eval=FALSE}
library(haven) # for importing SPSS and Stata data
# Import the SPSS data set
spss_data <- read_sav("SUR_2023_LAPOP_AmericasBarometer_v1.0_w_orginal.sav")
# Import the Stata data set
stata_data <- read_dta("03-poverty-analysis-data-2022-rt001-housing-plus.dta")
```

---

1. **Use a pipe to do the following:**

- draw 1000 values from a normal distribution with `mean = 5` and `sd = 1` - $N(5, 1)$, 
- create a matrix where the first 500 values are the first column and the second 500 values are the second column **
- make a scatterplot of these two columns

If you'd like the same results as I have obtained, you can fix the random seed
```{r}
set.seed(123)
```

```{r}
rnorm(1000, 5) %>%
  matrix(ncol = 2) %>%
  plot()
```


---

2. **On the `03-poverty-analysis-data-2022-rt001-housing-plus.dta`: Use a pipe to calculate the correlation matrix on the continuous variables only. Round the result to two decimal places.**

```{r}
cor_stata <- stata_data %>% 
  as_factor() %>% # first make sure that factors are factors
  select(where(is.numeric)) %>% # select only numeric variables
  cor(use = "pairwise.complete.obs") # use all info from complete pairs

# which is the maximum correlation in the correlation matrix?
# first, set the diagonal to zero -> these values are all 1
diag(cor_stata) <- 0
# calculate the maximum correlation
max_cor_value <- max(cor_stata, na.rm = TRUE) # there are NAs in cor_stata
which_max <- which(cor_stata == max_cor_value, 
                   arr.ind = TRUE) # get the indices of rows and columns
which_max
```

We can see that the pairs `fortnight, hhid` and `CPI_2017_22, CPI_june2022` have the highest correlation of `1`. 

```{r}
stata_data %>% 
  select(CPI_2017_22, CPI_june2022) %>% 
  cor(use = "pairwise.complete.obs")
```

This is because the values in CPI_2017_22 and CPI_june2022 are (near) constant.

::: callout-tip
## Sneak peek for tomorrow
We can also select only variables that belong to a specific set of items, such as `q13` in the STATA data set. This is done by selecting only variables that start with `q13` using the `starts_with()` verb: 
```{r}
cor_stata <- stata_data %>% 
  as_factor() %>% # first make sure that factors are factors
  select(where(is.numeric)) %>% # select only numeric variables
  select(starts_with("q13")) %>% # select only variables that start with q13
  cor(use = "pairwise.complete.obs") # use all info from complete pairs

diag(cor_stata) <- 0
# calculate the maximum correlation
max_cor_value <- max(cor_stata, na.rm = TRUE) # there are NAs in cor_stata
which_max <- which(cor_stata == max_cor_value, 
                   arr.ind = TRUE) # get the indices of rows and columns
which_max
```
:::

---

3. **Now use a pipe to calculate the correlation for the pair (`x4`, `y4`) on the `anscombe` data set**

Using the standard `%>%` pipe:
```{r}
anscombe %>%
  subset(select = c(x4, y4)) %>%
  cor()
```
Alternatively, we can use the `%$%` pipe from package `magrittr` to make this process much more efficient.
```{r}
anscombe %$%
  cor(x4, y4)
```

---

4. **Have a look at the `boys` data set from package `mice` (don't forget to `library(mice)`). Use a pipe to calculate the correlation between `hgt` and `wgt` in the `boys` data set from package `mice`.**

Because `boys` has missing values for almost all variables, we must first select `wgt` and `hgt` and then omit the rows that have missing values, before we can calculate the correlation. Using the standard `%>%` pipe, this would look like:
```{r}
mice::boys %>% # mice::boys tells us that boys comes from package mice
  select(wgt, hgt) %>%
  cor(use = "pairwise.complete.obs")
```
which - because there are only two variables - is equivalent to 
```{r}
boys %>%
  select(wgt, hgt) %>%
  na.omit() %>%
  cor()
```

Alternatively, we can use the `%$%` pipe:
```{r}
boys %$% 
  cor(hgt, wgt, use = "pairwise.complete.obs")
```
The `%$%` pipe *unfolds* the listed dimensions of the `boys` data set, such that we can refer to them directly. 

---

5. **In the `boys` data set, `hgt` is recorded in centimeters. Use a pipe to transform `hgt` in the `boys` dataset to height in meters and verify the transformation by calculating the mean of `hgt`**

Using the standard `%>%` and the `%$%` pipes:
```{r}
boys %>%
  mutate(hgt = hgt / 100) %$% # transform centimeters to meters
  mean(hgt, na.rm = TRUE) # verify that indeed it is now in meters
```
 
---

6. **Use a pipe to filter all rows in the `boys` data set where `hgt` is larger than 1.5 meters and `wgt` is larger than 50 kg. How many rows are there in the subset? And how many rows did you exclude?**

Let's first make a subset of the `boys` data without the excluded rows
```{r}
boys_subset <- 
  boys %>%
  filter(hgt > 1.5, wgt > 50) # filter rows where hgt > 1.5 and wgt > 50
```

The subset has `r nrow(boys_subset)` rows:
```{r}
boys_subset %>% 
  nrow()
```

The original `boys` data had `r nrow(boys)` rows. this means that `748 - 263 =``r nrow(boys) - nrow(boys_subset)` rows have been excluded.
```{r}
boys %>% 
  nrow()
```


---

### Useful References for Practical 2

- [`magrittr`](https://magrittr.tidyverse.org)
- [`R` for Data Science](http://r4ds.had.co.nz) - [Chapter 18 on pipes](http://r4ds.had.co.nz/pipes.html)


---

## Extra Practical: Data Management
Begin this practical exercise by setting the maximum line length in `R-Studio` to 80 characters. Go to `RStudio`'s `Preferences` (or `Global Options` under `Tools`) --> `Code` --> `Display`, and tick the `show margin` box. Make sure that the `margin column` is set to `80`

The following packages are required for this practical:
```{r, message=FALSE}
library(dplyr)    # for data manipulation
library(magrittr) # for flexible pipes
library(mice)     # for the mammalsleep and boys datasets
library(haven)    # for importing SPSS and Stata data
```

---

### Exercise 1-5

---

1. **Install package `mice`. **

Go to `Tools` > `Install Packages` in `RStudio`. If you are connected to the internet, select  `Repository` under `Install From` and type `mice` under `Packages`. Leave the `Install to Library` at default and make sure that `Install Dependencies` is selected. Click install. If you are not connected to the internet, select `Package Archive File` under "Install from" and navigate to the respective file on your drive. 

Some packages depend on other packages, meaning that their functionality may be limited if their dependencies are not installed. Installing dependencies is therefor recommended, but internet connectivity is required. 

If all is right, you will receive a message in the console that the package has been installed (as well as its dependencies). 

ALternatively, if you know the name of the package you would like to install - in this case `mice` - you can also call `install.packages("mice")` in the console window.

---

2. **Load package `mice`. **
Loading packages can be done through functions `library()` and `require()`.
```{r}
library(mice)
```

If you use `require()` within a function, and the required package is not available, `require()` will yield a warning and the remainder of the function is still executed, whereas `library()` will yield an error and terminate all executions. The use of `library()` when not doing too complicated things is preferred - `require()` would result in more computational overhead because it calls `library()` itself. 

---

3. **Most packages have datasets included. Open the `mammalsleep` dataset from package `mice` by typing `mammalsleep` in the console, and subsequently by using the function `View()`. **

Using `View()` is preferred for inspecting datasets that are large. `View()` opens the dataset in a spreadsheet-like window (conform MS Excel, or SPSS). If you `View()` your own datasets, you can even edit the datasets' contents. 

---

4. **Write the mammalsleep dataset from package `mice` to the work directory (= the directory of your R project) as a tab-delimited text file with `.` as a decimal separator. Use the function `write.table()` and name the file `mammalsleep.txt`.**

```{r, warning=FALSE, message=FALSE}
write.table(x = mammalsleep, # the data to be exported
            file = "mammalsleep.txt", # the name of the file
            sep = "\t", # column seperated by tabs
            dec = ".", # decimal separator
            row.names = FALSE) # do not include the rownames as column
```
The command `sep = "\t"` indicates that the file is tabulated and the command `dec = "."` indicates that a point is used as the decimal separator (instead of a comma). `row.names = FALSE` tells `R` that row names are not to be included in the exported file. 

---

5. **Import the `mammalsleep.txt` file with `read.table()`. **
```{r}
sleepdata <- read.table("mammalsleep.txt", # the name of the file
                        sep = "\t", # columns seperated by tabs
                        dec = ".", # decimal separator
                        header = TRUE, # 1st row contains variable names
                        stringsAsFactors = TRUE) # convert strings to factors
sleepdata %<>% # assign pipe to feed the result back into sleepdata
  as_tibble() # convert to tibble
```

The command `sep = "\t"` indicates that the file is tabulated and the command `dec = "."` indicates that a point is used as the decimal separator (instead of a comma). `header = TRUE` tells `R` that variable names are included in the header.

All files that are presented in the work directory of the current `R` project, can essentially be imported into the workspace (the space that contains all environments) directly. All other locations require you to specify the specific path from the root of your machine. To find out what the current work directory is, you can type `getwd()` and to change the work directory you can use `setwd()`. The beauty of using projects in RStudio is that you would never have to change the work directory, as the work directory is automatically set, relative to your projects' `R`-scripts. 

There are many packages that facilitate importing data sets from other statistical software packages, such as SPSS (e.g. function `read_spss()` from package `haven`), Mplus (package `MplusAutomation`), Stata (`read_dta()` in `haven` and `read.dta()` in `foreign`), SAS (`sasxport.get()` from package `Hmisc`) and from spreadsheet software, such as MS Excel (function `read.xlsx()` from package `xlsx`). 

---

### Exercise 6-10

---

6. **The dataset we've just imported contains the sleepdata by Allison & Cicchetti (1976). Inspect the sleepdata and make yourself familiar with it. **

If you would like to know more about this dataset, you can open the help for the `mammalsleep` dataset in package `mice` through `?mammalsleep`. 

Inspecting the sleepdata could be done by 
```{r}
# the data structure
summary(sleepdata) #distributional summaries
sleepdata %>% 
  select(-species) %>% # exclude the first column (because it is character)
  cor(use = "pairwise.complete.obs") %>% # calculate Pearson's correlation
  round(2) # round to two decimal places 
head(mammalsleep) # first six rows
tail(mammalsleep) # last six rows
glimpse(mammalsleep) # a quick overview of the data structure
```
```{r eval=FALSE}
?mammalsleep # the help
```
Note that the sleepdata dataset is automatically recognized as a dataframe. There is one factor (categorical variable) containing the animal names. 

The functions `head()` and `tail()` are very useful functions. As is function `str()` as it gives you a quick overview of the measurement levels in `mammalsleep`. 

Since `mammalsleep` is an `R`-data set, there should be a help file. Taking a look at `?mammalsleep` provides information about the measurements and origin of the variables.

One thing that may have caught your attention is the relation between `ts`, `ps` and `sws`. This is a deterministic relation where total sleep (`ts`) is the sum of paradoxical sleep (`ps`) and short-wave sleep (`sws`). In the event that you would model the data, you need to take such relations into account. 

---

7. **Save the current workspace. Name the workspace `Practical_3.RData`. Also, save the sleepdata file as a separate workspace called `Sleepdata.RData`. **

Now that we have imported our data, it may be wise to save the current workspace, i.e. the current state of affairs. Saving the workspace will leave everything as is, so that we can continue from this exact state at a later time, by simply opening the workspace file. To save everything in the current workspace, type:
```{r}
# To save the entire workspace:
save.image("Practical_3juni2025.RData")
```

To save just the data set `sleepdata`, and nothing else, type:
```{r}
# To save the data set only.
save(sleepdata, file = "sleepdata.RData")
```

With the save functions, any object in the work space can be saved. 

---

8. **Some animals were not used in the calculations by Allison and Cicchetti. Exclude the following animals from the sleepdata data set: Echidna, Lesser short-tailed shrew and Musk shrew. Save the data set as `sleepdata2`.** Tip: use the square brackets to indicate [rows, columns] or use the function `filter()` from `dplyr`.

There are three ways to exclude the three animals from the data set. The first approach uses the names:
```{r}
exclude <- c("Echidna", "Lesser short-tailed shrew", "Musk shrew")
# Indicate the species that match the names in exclude
which <- sleepdata$species %in% exclude 
which
sleepdata_new <- sleepdata[!which, ]
```

and the second approach uses the row numbers directly (you would need to inquire about, or calculate the row numbers)
```{r}
sleepdata_new <- sleepdata[-c(16, 32, 38), ]
```
Note that the numbered option requires less code, but the named option has a much lower probability for error. As the data set might change, or might get sorted differently, the second option may not be valid anymore. 

The third approach uses function `filter()` from package `dplyr`:
```{r}
library(dplyr) # Data Manipulation
dplyr::filter(sleepdata, !sleepdata$species %in% exclude) 
# ! makes all TRUES into FALSE --> it takes the complement
```

---

9. **Plot brain weight as a function of species. **

```{r}
plot(brw ~ species, data = sleepdata_new)
```

---

10. **Some animals have much heavier brains than other animals. Find out the names of the animals that have a brain weight larger than 1 standard deviation above the mean brain weight. Replicate the plot from Question 9 with only these animals and do not plot any information about the other animals. **

To find out which animals have a brain weight larger than 1 standard deviation above the mean brain weight:
```{r}
sd.brw <- sd(sleepdata_new$brw) # standard deviation  
mean.brw <- mean(sleepdata_new$brw) # mean
which <- sleepdata_new$brw > (mean.brw + (1 * sd.brw)) # which are larger?
as.character(sleepdata_new$species[which]) # names of the animals with brw > 1000
```

To plot these animals:
```{r}
plot(brw ~ species, data = sleepdata_new[which, ])
```

The downside is that it still prints all the animals on the x-axis. This is due to the factor labels for `species` being copied to the smaller subset of the data. Plot automatically takes over the labels. For example, 
```{r}
sleepdata_new$species[which]
```

returns only 3 mammals, but still has 62 factor levels. To get rid of the unused factor levels, we can use function `factor()`:
```{r}
sleepdata_3mammals <- sleepdata_new[which, ]
sleepdata_3mammals$species <- factor(sleepdata_3mammals$species)
sleepdata_3mammals$species
```
To plot the graph that we wanted:
```{r}
plot(brw ~ species, data = sleepdata_3mammals)
```

---

If your current software-analysis platform is different from `R`, chances are that you prepare your data in the software of your choice. In `R` there are fantastic facilities for importing and exporting data and I would specifically like to pinpoint you to package [`haven`](https://haven.tidyverse.org/index.html) by [Hadley Wickham](http://hadley.nz). It provides wonderful functions to import and export many data types from software such as Stata, SAS and SPSS. 

---

### Useful links for the Extra Practical

- [`Package haven`](https://haven.tidyverse.org/index.html) for importing/exporting `SPSS`, `SAS` and `STATA` data.

---

End of Practical