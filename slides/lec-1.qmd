---
title: "Introductie in R, Quarto en RStudio"
author: 
  - name: Gerko Vink
    orcid: 0000-0001-9767-1924
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
  - name: "Laurence Frank"
    orcid: "0000-0002-4075-8129"
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
date: 2 June 2025
date-format: "D MMM YYYY"
execute: 
  echo: true
format: 
  revealjs:
    smaller: true
    theme: [solarized, gerko.scss]
    embed-resources: true
    progress: true
    margin: 0.075
    logo: logo.png 
    toc: false
    toc-depth: 1
    toc-title: Outline
    slide-number: true
    scrollable: false
    width: 1200
    reference-location: margin
    footer: Gerko Vink @ Anton de Kom Universiteit, Paramaribo
    standalone: true
---

## Disclaimer {.smaller}
I owe a debt of gratitude to many people as the thoughts and code in these slides are the process of years-long development cycles and discussions with my team, friends, colleagues and peers. When someone has contributed to the content of the slides, I have credited their authorship.

Images are either directly linked, or generated with StableDiffusion or DALL-E. That said, there is no information in this presentation that exceeds legal use of copyright materials in academic settings, or that should not be part of the public domain. 

::: {.callout-warning}
You **may use** any and all content in this presentation - including my name - and submit it as input to generative AI tools, with the following **exception**:

- You must ensure that the content is not used for further training of the model
:::

## Slide materials and source code
::: callout-tip
# Materials
- lecture slides on Moodle
- course page: [www.gerkovink.com/sur](https://www.gerkovink.com/sur)
- source: [github.com/gerkovink/sur](https://github.com/gerkovink/sur)
:::

## Topics of this lecture

1. Introduction to R and RStudio
   + Working with packages
   + Getting help in R
   
2. Reproducible data analysis with `Quarto`

3. Organise your work with R Projects   

4.  R data objects
    -   vectors
    -   matrices
    -   data frames
    -   lists
    -   factors

# Introduction to R and RStudio


## What is R

* R is a language and environment for statistical computing and for graphics
* Based on the object-oriented language S (1975)
* 100% free software
* Managed by the R Foundation for Statistical Computing, Vienna, Austria.
* Community-driven:
  + More than 10.000 packages developed by community
  + New packages are constantly being developed
  + New features are constantly being added to existing packages


## Fun fact about R:

Every version of `R` that is released is named after a topic in a Peanuts comic. The `R` version 4.3.3 (2024-02-29) is called "Angel Food Cake".

R version  | Charlie Brown cartoon
---------- | ----------
![](img/l1/Screenshot_Rversion_AngelFoodCake.png){width=80%} | ![](img/l1/Peanut_AngelFoodCake.png){width=70%}

## What is RStudio?

* RStudio is an Integrated Development Environment (IDE)
* RStudio has all functionality in one place and makes working with R much easier.
* Use RStudio to:
  + Edit scripts, Run scripts
  + Manage your code with highlighting
  + Navigate files, organize projects
  + Utilize version control (e.g. Github)
  + View static and interactive graphics
  + Create different file types (RMarkdown, Shiny apps)
  + Work with different languages (Python, JavaScript, C++, etc.)


## The 4 panes in RStudio 

![](img/l1/RStudio_4Panes_Labels.png){width=90%}


# Working with R packages

## R Packages: base installation

* When you start RStudio and R only the base packages are activated: the basic installation with basic functionality.

* There are almost 20.000 packages that have been developed by R users all over the world. See the [Comprehensive R Archive Network (CRAN)](https://cran.r-project.org/web/packages/)

* Not efficient to have all these packages installed every time you use R. Install only the packages you want to use.

## See which packages are active

* Use `sessionInfo()` to see which packages are active. 

* This is how the basic installation looks like:

![](img/l1/BaseInstallationR.png){width="60%}


## Overview of installed packages

An overview of the packages you have installed, see the tab “Packages” in the output pane:

![](img/l1/InstalledPackageOverview.png){width=70%}


## How to work with packages

Packages are to `R` what apps are on your mobile phone.

* When you want to use a package for the first time, you have to **install** the package.

* Each time you want to use the package, you have to **load** (activate) it.


### Opening and closing packages 

To **load** a package use the following code (similar to opening an app on your phone):

```{r eval=FALSE}
library(ggplot2)
```

To close a package use (similar to closing an app on your phone): 
```{r eval=FALSE}
detach(ggplot2)
```



# Reproducible data analysis with `Quarto`

## Why work with `Quarto`?

The need to *combine code and text* and to document all the steps to make __reproducible__ (scientific) reports of data analyses.

<br>

<img src="img/l1/Text_plus_Code.png" alt="HTML5 Icon" width="30%"/>


## Why work with `Quarto`?

It is __efficient__. Generate and update reports in all kinds of formats:

![](img/l1/FileformatsRMarkdown.png){width=80%}

[_Source:_ What is R Markdown? Video RStudio](https://vimeo.com/178485416) 



# Demo RStudio and `Quarto`


## Writing text in `Quarto`

See the [R Markdown Cheat Sheet](https://posit.co/wp-content/uploads/2022/10/rmarkdown-1.pdf) for a complete list of options.

![](img/l1/RMarkdownSyntaxText1.png){width=70%}

## Writing text in `Quarto`


![](img/l1/Header.png){width=80%}
![](img/l1/RMarkdownSyntaxText2.png){width=80%}

## Writing code in `Quarto`

Code chunks start with `{r }` (for R code). You can give code chunks names (here cars).

![](img/l1/Example_CodeChunk.png){width=90%}

This is how the result looks like in the rendered html document. Display of both R code and results:

![](img/l1/OutputChunkCode.png){width=100%}

## Code chunk options {.smaller}

You can choose to hide the R code with `echo=FALSE` in the chunk header:

![](img/l1/ExampleCodeChunk_Echo.png){width=90%}

![](img/l1/OutputCodeChunk_EchoFalse.png){width=40%}

See the [Quarto reference page](https://quarto.org/docs/computations/execution-options.html) for a complete list of chunk options.

## Getting help with `Quarto`

Quarto is the evolution of R Markdown. In `RStudio` you can find the Markdown Reference: 

![](img/l1/RMarkdownHelp.png){width=60%}


# R Studio Projects

## Use RStudio Projects

Every time you start a new (data analysis) project, make it a habit to create a new __RStudio Project__.

**Because you want your project to work:**

-   not only now, but also in a few years;
-   when the folder and file paths have changed;
-   when collaborators want to run your code on their computer.

<br>

__RStudio Projects__ create a convention that guarantees that the project
can be moved around on your computer or onto other computers and will
still "just work". It creates relative paths (no more broken paths!).


## Example: Data analysis RStudio project

All data, scripts, and output should be stored within the project directory.

Every time you want to work on this project: open the project by
clicking the `.Rproj` file.

<center><img src="img/l1/Example-project-structure.png" alt="HTML5 Icon" width="60%"/></center>

# R data objects

## Using R as a calculator

The simplest thing you could do with R is do arithmetic:

```{r collapse=T}
100 + 10
```

```{r collapse=T}
9 / 3
```

## Using R as a calculator

Here are the common signs to use in arithmetic:

| arithmetic     | sign        |
|----------------|-------------|
| Addition       | `+`         |
| Subtraction    | `-`         |
| Multiplication | \*          |
| Division       | `/`         |
| Exponents.     | `^` or \*\* |

## Assignment operator

If you have used `R` before, you know the `<-` **assignment operator**.

Here `x` is assigned the value `8`

```{r}
x <- 8 
```

If you run this code:

-   a new value will be saved in your work space (uses computer memory!)
-   In the environment pane, the tab "Environment", you will see `x` under "Values" followed by 8

![](img/l1/EnvironmentPaneValues.png){width="80%"}

## Printing values

```{r}
x <- 8 
```

Assigning does not print the value 8.

If you want to print to value 8 you can do:

```{r eval=FALSE}
x 

# or:

print(x)
```

## R is an object-oriented programming language

When you assign values with the assignment operator `<-` you create an R **object**.

Objects can contain data, functions or even other objects.

The most commonly used objects are:

-   vector
-   matrix
-   data frame
-   list
-   formulas and models

# Vectors

## Vector

A vector is a concatenation of values (data). The simplest object in R is a vector with one element:

```{r}
x <- 8 
```


## Vector generating functions

The function `c(...)` collects elements in a vector

```{r collapse=T}
v <- c(1, 2, 3, 4, 5)
```

-   `seq(from, to)` or `:` generate a sequence of integers

::: columns-2
```{r}
seq(from = 1, to = 5)
```

```{r}
1:5
```
:::

-   `rep(..., times)` repeats `...` a number of `times`

```{r collapse=T}
rep(1:5, times = 2)
```

## Classes

Vectors (and other `R` objects) can contain be of data types (classes)

**Numeric**

```{r collapse=T}
v <- c(1, 2, 3, 4, 5)
class(v)
```

**Character**

```{r collapse=T}
char <- c("cat", "dog")
typeof(char)
```

A vector can only be of *one* class. If you combine different classes, R will convert them to the most general class.

## Classes

**Logical** data can take only one of two values: `TRUE` or `FALSE`.

```{r collapse=T}
v <- c(1,2,3,4,5)

# Identify elements > 3 in numeric vector v:
logical <- v > 3

print(logical)
```

## Vector classes

-   all elements of a vector (are forced to) have the same class

```{r collapse=T}
class(num <- c(1, 2))

class(char <- c("cat", "dog"))

c(num, char)

class(c(num, char))
```

# Matrices

## Matrix generating functions {.smaller}

-   `matrix(data, nrow, ncol)` generates a matrix
    -   all elements (are forced to) have the same class

```{r collapse=T}
M <- matrix(data = 1:6, nrow = 2, ncol = 3)
M
class(M)
```

::: columns-2
`cbind(...)` collects vectors in a matrix as columns:
```{r collapse=T}
cbind(a = 1:2, b = c("cat", "dog"))

```

`rbind(...)` collects vectors as rows:
```{r collapse=T}
rbind(a = 1:2, b = c("cat", "dog"))
```
:::

# Data frames

## Data frame generating functions

-   `data.frame(...)` collects vectors as variables in a data frame
    -   variables can have different classes

```{r collapse=T}
df <- data.frame(x = 1:2, y = c("cat", "dog"), z = c(T, F))
df
class(df)

sapply(df, class)
```

# Lists

## List generating function

-   `list(...)` creates a list

    -   can contain objects of any dimension and class
    -   used for collecting output from R function (e.g. linear regression)

```{r collapse = T}
L <- list(v = c(1, 2), matrix = M, df = df, list(1:10))
class(L)
sapply(L, class)
```

# Factors

## Factors

-   `factor(...)` makes / changes vector into factor

    -   factors have levels
    -   used for categorical variables in analyses (e.g. linear model)

```{r collapse=T}
animals <- rep(c("cat", "dog"), 4)
summary(animals)

factor(animals)
summary(factor(animals))
```

## Assign names with `names()`

Use `names()` to assign names to elements in R objects.

For example to the elements of a list:

```{r}
names(L) <-c("Vector", "Matrix", "Dataframe", "List")
L
```

## Use of data objects

When to use the R data objects?

| Object           | Use                       | Why                                                                   |
|--------------------|------------------------|----------------------------|
| data frame       | statistical analysis      | can store variables of any class                                      |
| model formula    | statistical models, plots | concise and readable, flexible, consistent across functions, packages |
| lists            | storage of output         | can store any object of any class                                     |
| vectors/matrices | programming               | can do fast calculations                                              |

# Naming conventions, style guide

## File and object naming

-   File names should be **meaningful**.
-   **Avoid spaces in file names** and use one of the **naming conventions**:

1.  **snake_case**: words are separated by underscores (\_), and all letters are typically in lowercase. Examples: data_analysis.RData, my_data.csv.

2.  **camelCase:**: each word within a compound word is capitalized, except for the first word, and no spaces or underscores are used to separate the words. Examples: calculateMean, summaryStatistics.

3.  **PascalCase**: the first letter of each word in a compound word is capitalized, and no spaces or underscores are used to separate the words. Examples: DataAnalysis, DescriptiveStatistics.

## Spacing and indentation

-   When indenting your code, use 2 spaces. `RStudio` does this for you!
-   Never use tabs or a mix of tabs and spaces.
-   Place spaces around all operators (`=, +, -, <-`). Use `x <- 5` not `x<-5`

<br>

Exception: spaces around = are optional when passing parameters in a function call.

```{r eval=FALSE}
lm(age ~ bmi, data=boys)
```

or

```{r eval=FALSE}
lm(age ~ bmi, data = boys)
```

## Commas and punctuation

-   Do not put spaces before commas, but always put a space after commas.
    -   `c(1, 2, 3)`
-   For function arguments, follow the same rule.
    -   `sum(a = 1, b = 2)`

<br>

Bad examples:

```{r eval=FALSE}
# No spaces around debug
if ( debug )  
  
# Needs a space after the comma   
x[1,]  
```

## Comments

-   Use \# for single-line comments and place them above the code they reference.
-   Keep comments concise and relevant.

```{r eval=F}
# Read the msleep.csv data and save the data as msleep
msleep <- readr::read_csv("msleep.csv")
```
