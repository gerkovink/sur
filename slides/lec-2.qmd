---
title: "Data management in R"
author: 
  - name: Gerko Vink
    orcid: 0000-0001-9767-1924
    email: g.vink@uu.nl
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
date: 2 June 2025
date-format: "D MMM YYYY"
execute: 
  echo: true
editor_options:
  chunk_output_type: console
format: 
  revealjs:
    theme: [solarized, gerko.scss]
    embed-resources: true
    progress: true
    margin: 0.075
    logo: logo.png 
    toc: false
    toc-depth: 1
    toc-title: Outline
    slide-number: true
    scrollable: false
    width: 1200
    reference-location: margin
    footer: Gerko Vink @ Anton de Kom Universiteit, Paramaribo
    standalone: true
---

## Disclaimer {.smaller}
I owe a debt of gratitude to many people as the thoughts and code in these slides are the process of years-long development cycles and discussions with my team, friends, colleagues and peers. When someone has contributed to the content of the slides, I have credited their authorship.

Images are either directly linked, or generated with StableDiffusion or DALL-E. That said, there is no information in this presentation that exceeds legal use of copyright materials in academic settings, or that should not be part of the public domain. 

::: {.callout-warning}
You **may use** any and all content in this presentation - including my name - and submit it as input to generative AI tools, with the following **exception**:

- You must ensure that the content is not used for further training of the model
:::

## Slide materials and source code
::: callout-tip
# Materials
- lecture slides on Moodle
- course page: [www.gerkovink.com/sur](https://www.gerkovink.com/sur)
- source: [github.com/gerkovink/sur](https://github.com/gerkovink/sur)
:::

## Recap

Yesterday we learned

1. How to use `R` and `RStudio`
2. How to install packages
3. How to use simple data containers
4. How to do subsetting in base `R` with `[ ]` and `$`
5. How to use logical operators to subset data
6. How to adhere to code conventions en style


## Today
- Importeren en bestuderen van datasets
- Begrijpen en toepassen van verschillende datatypes en database formats
- Variabelen labelen en (her)coderen
- De blauwdruk van R: frames en environments
- Pipes
- Formules gebruiken in functies

## New packages we use
```{r warning=FALSE, message=FALSE}
library(tibble)   # tibbles variation on data frames
library(dplyr)    # data manipulation
library(haven)    # in/exporting data
library(magrittr) # pipes
library(labelled) # labelled data manipulation
library(tidyr)    # data tidying
library(broom)    # tidying model outputs
```

<img src="img/lec-2/pipe.jpg" style="display:block;width:200px;margin-left:auto;margin-right:auto"></img>

<img src="img/lec-2/magrittr-vignette.png" style="display:block;width:200px;margin-left:auto;margin-right:auto"></img>

## Importing Data: Stata
```{r}
stata_data <- read_dta("files/03-poverty-analysis-data-2022-rt001-housing-plus.dta")
head(stata_data)
```

## Importing Data: SPSS
```{r}
spss_data <- read_sav("files/SUR_2023_LAPOP_AmericasBarometer_v1.0_w_orginal.sav",
                      user_na = TRUE)
spss_data2 <- read_sav("files/SUR_2023_LAPOP_AmericasBarometer_v1.0_w_orginal.sav")
head(spss_data)
```

## Quick inspection: missingness
```{r}
sum(is.na(stata_data)) # total number of NAs
sum(is.na(spss_data)) # total number of NAs
sum(is.na(spss_data2)) # total number of NAs
```

## Let's look at gender
```{r}
head(spss_data$q1tc_r, n = 20)
head(spss_data2$q1tc_r, n = 20)
```


## Let's look at gender
```{r}
table(spss_data$q1tc_r)
table(spss_data2$q1tc_r)
```

## Correcting the missings
In base `R`, there is only one type of missing value: `NA`. In SPSS and Stata, there are multiple types of missing values. In R, we can use the `haven` package to convert these to `NA`.

```{r}
spss_data <- zap_missing(spss_data) # set all special missing values to NA
```
<br>

### Let's look at gender again
```{r}
table(spss_data$q1tc_r)
table(spss_data2$q1tc_r)
```
## Tagged missing values
Alternatively, if you'd still like to use *special `NA`s*, you can use `haven::tag_na()`
```{r}
x <- c(1:5, tagged_na("a"), tagged_na("z"), NA)

# Tagged NA's work identically to regular NAs
x
is.na(x)
```

## Exploring data sets
```{r}
glimpse(spss_data)
```

## Exploring data sets
```{r}
glimpse(stata_data)
```

## Labels and factors
Currently, the `q1tc_r` variable is a numeric vector - even though the SPSS labels are still recorded. In R, we often use factors to represent categorical data. Factors are stored as integers with labels attached.

```{r}
is.factor(spss_data$q1tc_r)
```

We can easily convert the `q1tc_r` variable to a factor using the `haven` package's `as_factor()` function, which will also preserve the labels.

```{r}
spss_data <- as_factor(spss_data)
is.factor(spss_data$q1tc_r)
```

## Exploring again - factored
```{r}
glimpse(as_factor(spss_data))
```

## Exploring again - factored
```{r}
glimpse(as_factor(stata_data))
```

## Pipes
Pipes are a way to chain together multiple operations in a more readable way. The pipe operator `%>%` takes the output of the left-hand side and passes it as the first argument to the function on the right-hand side. In R, there is now also the `|>` operator, which is a base R pipe.

Remember
```{r eval=FALSE}
glimpse(as_factor(stata_data))
```

With a pipe this would be
```{r eval = FALSE}
spss_data %>% 
  as_factor() %>% 
  glimpse()
```

and with the base `R` pipe `|>` this would be
```{r}
spss_data |>
  as_factor() |>
  glimpse()
```

## Pipes in detail

- `%>%` is the pipe operator from the `magrittr` package
- `|>` is the base R pipe operator introduced in R 4.1.0

Both operators allow you to chain together multiple operations in a more readable way

A pipe is a way to pass the output of one function as the input to another function, without having to create intermediate variables.

`A %>% B` is equivalent to `B(A)`, where `A` is the output of the left-hand side and `B` is the function on the right-hand side. `A` is expected to be the first argument in function `B`. 

::: callout-warning
The next step in a pipe is always expected to be a function! If the next step is not a function, you need to be clever, otherwise you'll get an error.
::: 

## What if the next step is not the first argument?
You can use the **placeholder** `.` (or `_` with the native `R` pipe) to indicate where the output of the previous step should go in the next function.

For example, 
```{r}
stata_data %>% 
  filter(q13_05 == 1 | q13_05 == 2) %>%
  t.test(Year_s ~ q13_05, data = .)
```
## What if the next step is not the first argument?
You can use the **placeholder** `.` (or `_` with the native `R` pipe) to indicate where the output of the previous step should go in the next function.

For example, 
```{r}
stata_data %>% 
  filter(q13_05 == 1 | q13_05 == 2) |>
  t.test(Year_s ~ q13_05, data = _)
```

## Other pipes
- `%$%` is the exposition pipe from the `magrittr` package, which allows you to use the names of the variables in the data frame directly without having to use the `$` operator.
- `%<>%` is the assignment pipe from the `magrittr` package, which allows you to modify the data frame in place, without the need for calling `assign()` or `<-` again.

There are more pipes (like the `%T>%` pipe), but they can be very confusing and we therefore skip them in this course. 

```{r}
stata_data %>% 
  filter(q13_05 == 1 | q13_05 == 2) %$% # Note the exposition pipe
  t.test(Year_s ~ q13_05)
```


## Renaming variables with a pipe
```{r eval=FALSE}
spss_data <- spss_data %>%
  rename(gender = q1tc_r)
```
```{r}
spss_data <- spss_data %<>%
  rename(gender = q1tc_r)

spss_data$gender %>% head()
```

## Recoding with `mutate()` en `recode()`
```{r}
spss_data <- spss_data %>%
  mutate(gender_rec = recode(gender, 
                             "Man/male" = "male", 
                             "Woman/female" = "female"))

spss_data$gender %>% head()
spss_data$gender_rec %>% head()
```

## Labeling variables
With labeled variables, we can add an additional layer of description to variable, very similar to what SPSS and STATA do. 

```{r}
spss_data <- set_variable_labels(spss_data, gender_rec = "Gerecodeerd geslacht")
spss_data$gender_rec %>% glimpse()
```

## Selecting and filtering
```{r}
spss_data %<>%
  rename(age = q2)

spss_data %>%
  filter(age > 18) %>%
  select(age, gender) %>%
  summary()
```

## Calculations and summarising 

```{r}
spss_data %>%
  filter(age > 18) %>%
  summarise(mean_age = mean(age, na.rm = TRUE))
```


## Joining data
```{r}
band_members
band_instruments
```

## Inner join
With an inner join, we combine two data frames based on a common key. Only the rows with matching keys in both data frames are kept.

```{r}
band_members %>% inner_join(band_instruments)
```

## Left join
With a left join, we keep all rows from the left data frame and only the matching rows from the right data frame. If there is no match, the result will contain `NA` for the columns from the right data frame.
```{r}
band_members %>% left_join(band_instruments)
```



## Right join
With a right join, we keep all rows from the right data frame and only the matching rows from the left data frame. If there is no match, the result will contain `NA` for the columns from the left data frame.
```{r}
band_members %>% right_join(band_instruments)
```


## Full join
With a full join, we keep all rows from both data frames. If there is no match, the result will contain `NA` for the columns from the other data frame.
```{r}
band_members %>% full_join(band_instruments)
```

## Modeling in `R`
To model objects based on other objects, we use `~` (tilde)

For example, to model body mass index (BMI) on weight, we would type
```{r eval=FALSE}
BMI ~ weight
```
The `~` is used to separate the left- and right-hand sides in a model **formula**.

For functions (or models), within models we use `I()`
    - For example, to model body mass index (BMI) on its deterministic function of weight and height, we would type
```{r eval=FALSE}
BMI ~ I(weight / height^2)
```

## Modeling continued
We already saw the use of the `~` operator in the `t.test()` function, where we specified the outcome variable on the left-hand side and the grouping variable on the right-hand side.

```{r eval=FALSE}
stata_data %>% 
  filter(q13_05 == 1 | q13_05 == 2) %$%
  t.test(Year_s ~ q13_05)
```

## Using formulas

```{r}
# Use a formula in function lm() in a pipe
mtcars %>%
  lm(mpg ~ wt + hp, data = .) 
```

## Using formulas with `broom`
With the `broom` package, we can easily tidy up the output of models and other functions that return complex objects.

```{r}
mtcars %>%
  lm(mpg ~ wt + hp, data = .) %>% 
  tidy()
```


## Tables and Contingency Tables
```{r}
stata_data %$%
  table(district)

stata_data %$%
  table(district, stratum)
```

## Tables
```{r}
stata_data %$%
  table(district, stratum) %>% # calculate table
  prop.table() %>% # convert to proportions
  round(3) # round to 3 decimals
```

---

## Tibbles vs data.frames
Tibbles are a modern reimagining of data frames in R. They are part of the `tidyverse` and provide a more user-friendly interface for working with data.

```{r, paged.print=FALSE}
is_tibble(band_members)
band_members %>% 
  full_join(band_instruments)
```

```{r, paged.print=FALSE}
band_members %>% 
  full_join(band_instruments) %>% 
  as.data.frame()
```

## Layers in `R`
There are several 'layers' in `R`. Some layers you are allowed to fiddle around in, some are forbidden. In general there is the following distinction:

- The global environment. 
- User environments
- Functions
- Packages
- Namespaces

## Environments
The global environment can be seen as an olympic-size swimming pool. Everything you do has its place there. 

If you'd like, you may create another, separate environment to work in. 

- A user environment would by default not have access to other environments

## Functions

- If you create a function, it is positioned in the global environment. 

- Everything that happens in a function, stays in a function. Unless you specifically tell the function to share the information with the global environment. 

- See functions as a shampoo bottle in a swimming pool to which you add some water. If you'd like to see the color of the mixture, you'd have to squeeze the bottle for it to come out. 

## Package and Namespaces
Namespaces are a way to organize functions and data in `R`. Every package has its own namespace, which means that functions and data in one package do not interfere with functions and data in another package.

    - Everything needed to run the functions in a package is neatly contained within its own space
    - See packages as separate (mini) pools that are connected to the main pool (the global environment)
    
---

## %in%

The `%in%` operator is used to check if elements of one vector are present in another vector. It returns a logical vector indicating whether each element of the first vector is found in the second vector.

```{r}
x <- c(1, 2, 3, 4, 5)
y <- c(3, 4, 5, 6, 7)
x %in% y
```

## `grepl()`
The `grepl()` function is used to search for a pattern in a character vector. It returns a logical vector indicating whether the pattern is found in each element of the character vector.

```{r}
x <- c("apple", "banana", "cherry", "date")
pattern <- "a"
grepl(pattern, x)
grepl("^a", x) # starts with a
grepl("e$", x) # ends with e
grepl("cherry", x)
```

## Anscombe data
```{r}
anscombe |> 
  as_tibble()
```

## Anscombe data properties
```{r}
anscombe |>
  cor() |>
  round(2)
```

## Adding some random numbers
```{r}
anscombe_new <- 
  anscombe |> 
  mutate(x1 = x1 + rnorm(nrow(anscombe), mean = 0, sd = 0.1),
         x2 = x2 + rnorm(nrow(anscombe), mean = 0, sd = 0.1),
         x3 = x3 + rnorm(nrow(anscombe), mean = 0, sd = 0.1),
         x4 = x4 + rnorm(nrow(anscombe), mean = 0, sd = 0.1)) |> 
  as_tibble()
```

## `anscombe_new` data properties
```{r}
anscombe_new |>
  cor() |>
  round(2)
```



# Practical
