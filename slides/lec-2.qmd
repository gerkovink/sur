---
title: "Data management in R"
author: 
  - name: Gerko Vink
    orcid: 0000-0001-9767-1924
    email: g.vink@uu.nl
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
date: 2 June 2025
date-format: "D MMM YYYY"
execute: 
  echo: true
format: 
  revealjs:
    theme: [solarized, gerko.scss]
    embed-resources: true
    progress: true
    margin: 0.075
    logo: logo.png 
    toc: false
    toc-depth: 1
    toc-title: Outline
    slide-number: true
    scrollable: false
    width: 1200
    reference-location: margin
    footer: Gerko Vink @ Anton de Kom Universiteit, Paramaribo
    standalone: true
---

## Disclaimer {.smaller}
I owe a debt of gratitude to many people as the thoughts and code in these slides are the process of years-long development cycles and discussions with my team, friends, colleagues and peers. When someone has contributed to the content of the slides, I have credited their authorship.

These materials are generated by Gerko Vink, who holds the copyright. The intellectual property belongs to Utrecht University. Images are either directly linked, or generated with StableDiffusion or DALL-E. That said, there is no information in this presentation that exceeds legal use of copyright materials in academic settings, or that should not be part of the public domain. 

::: {.callout-warning}
You **may use** any and all content in this presentation - including my name - and submit it as input to generative AI tools, with the following **exception**:

- You must ensure that the content is not used for further training of the model
:::

## Slide materials and source code
::: callout-tip
# Materials
- course page: [www.gerkovink.com/sur](https://www.gerkovink.com/sur)
- source: [github.com/gerkovink/sur](https://github.com/gerkovink/sur)
:::

## Recap

Yesterday we have learned:

1. How to use `R` and `RStudio`
2. How to install packages
3. How to use simple data containers
4. How to do subsetting in base `R` with `[ ]`
5. How to use logical operators to subset data

## Today
Today we will learn how to:


## This lecture

- The blueprint of `R`
- Code conventions en style
- Basic data manipulation
- Basic analysis (correlation & t-test)
- R model formula and classes
- Pipes

## New packages we use
```{r warning=FALSE, message=FALSE}
library(MASS)     # for the cats data
library(dplyr)    # data manipulation
library(haven)    # in/exporting data
library(magrittr) # pipes
```

<img src="img/lec-2/pipe.jpg" style="display:block;width:200px;margin-left:auto;margin-right:auto"></img>

<img src="img/lec-2/magrittr-vignette.png" style="display:block;width:200px;margin-left:auto;margin-right:auto"></img>


## New functions

- `transform()`: changing and adding columns
- `dplyr::filter()`: row-wise selection (of cases)
- `dplyr::arrange()`: order rows by values of a column or columns (low to high)
- `table()`: frequency tables
- `class()`: object class
- `levels()`: levels of a factor
- `order()`: data entries in increasing order
- `haven::read_sav()`: import SPSS data
- `cor()`: bivariate correlation
- `sample()`: drawing a sample
- `t.test()`: t-test 

# The blueprint of `R` 

## Layers in `R`
There are several 'layers' in `R`. Some layers you are allowed to fiddle around in, some are forbidden. In general there is the following distinction:

- The global environment. 
- User environments
- Functions
- Packages
- Namespaces

## Environments
The global environment can be seen as an olympic-size swimming pool. Everything you do has its place there. 

If you'd like, you may create another, separate environment to work in. 

- A user environment would by default not have access to other environments

## Functions

- If you create a function, it is positioned in the global environment. 

- Everything that happens in a function, stays in a function. Unless you specifically tell the function to share the information with the global environment. 

- See functions as a shampoo bottle in a swimming pool to which you add some water. If you'd like to see the color of the mixture, you'd have to squeeze the bottle for it to come out. 

## Packages
- Packages have their own space. 

    - Everything needed to run the functions in a package is needly contained within its own space
    - See packages as separate (mini) pools that are connected to the main pool (the global environment)

## Loading packages

There are two ways to load a package in `R`
```{r}
library(stats)
``` 
and
```{r}
require(stats)
```

`require()` will produce a warning when a package is not found. In other words, it will not stop as function `library()` does. 

## Installing packages
The easiest way to install e.g. package `mice` is to use
```{r eval=FALSE}
install.packages("mice")
```

Alternatively, you can also do it in `RStudio` through 

`Tools --> Install Packages`

## Namespaces
- Namespaces. These are the deeper layers that feed new water to the surface of the mini pools.    
    - Packages can have namespaces. 
    - Functions within packages are executed within the package or namespace and have access to the global environment. 
    - Objects in the global environment that match objects in the function's namespace are ignored when running functions from packages!

# `R` in depth

## Workspaces and why you should sometimes save them
A workspace contains all changes you made to environments, functions and namespaces. 

A saved workspace contains everything at the time of the state wherein it was saved. 

You do not need to run all the previous code again if you would like to continue working at a later time. 

- You can save the workspace and continue exactly where you left. 

Workspaces are compressed and require relatively little memory when stored. The compression is very efficient and beats reloading large datasets from raw text. 

## History and why it is useful
`R` by default saves (part of) the code history and `RStudio` expands this functionality greatly. 

Most often it may be useful to look back at the code history for various reasons.

- There are multiple ways to access the code history.
  
    1. Use arrow up in the console. This allows you to go back in time, one codeline by one. Extremely useful to go back to previous lines for minor alterations to the code.
    2. Use the history tab in the environment pane. The complete project history can be found here and the history can be searched. This is particularly convenient when you know what code you are looking for. 
    
## Working in projects in `RStudio`
- Every project has its own history
- Every research project has its own project
- Every project can have its own folder, which also serves as a research archive
- Every project can have its own version control system
- R-studio projects can relate to Git (or other online) repositories

# Modeling

## Modeling in `R`
To model objects based on other objects, we use `~` (tilde)

For example, to model body mass index (BMI) on weight, we would type
```{r eval=FALSE}
BMI ~ weight
```
The `~` is used to separate the left- and right-hand sides in a model formula.

For functions (or models), within models we use `I()`
    - For example, to model body mass index (BMI) on its deterministic function of weight and height, we would type
```{r eval=FALSE}
BMI ~ I(weight / height^2)
```
```{r echo=FALSE, message=FALSE, warning=FALSE}
require(mice)
```

## Example
Remember the `boys` data from package `mice`:
```{r}
lm(bmi ~ wgt, data = boys)
```

## Example continued
Remember the `boys` data from package `mice`:
```{r}
lm(bmi ~ I(wgt / (hgt / 100)^2), data = boys)
```

## Why we really need `I()`
```{r}
lm(bmi ~ wgt + wgt^2, data = boys)
lm(bmi ~ wgt + I(wgt^2), data = boys)
```

## More efficient
It is 'nicer' to store the output from the function in an object. The convention for regression models is an object called `fit`. 
```{r}
fit <- lm(bmi ~ I(wgt / (hgt / 100)^2), data = boys)
```
The object `fit` contains a lot more than just the regression weights. To inspect what is inside you can use
```{r}
ls(fit)
```

## Inspecting what is inside `fit`
Another approach to inspecting the contents of `fit` is the function `attributes()`
```{r}
attributes(fit)
```

The benefit of using `attributes()` is that it directly tells you the class of the object. 

## Classes in R {.smaller}
```{r}
class(fit)
```

Classes are used for an object-oriented style of programming. This means that you can write a specific function that
- has fixed requirements with respect to the input. 
- presents output or graphs in a predefined manner. 

When a generic function fun is applied to an object with class attribute `c("first", "second")`, the system searches for a function called `fun.first` and, if it finds it, applies it to the object. 

If no such function is found, a function called `fun.second` is tried. If no class name produces a suitable function, the function fun.default is used (if it exists). If there is no class attribute, the implicit class is tried, then the default method.

## Classes example: plotting without class
```{r, dev.args = list(bg = 'transparent')}
plot(bmi ~ wgt, data = boys)
```

## Classes example: plotting with class
```{r, dev.args = list(bg = 'transparent')}
plot(lm(bmi ~ wgt, data = boys), which = 1)
```

## Classes example: plotting with class
```{r, dev.args = list(bg = 'transparent')}
plot(lm(bmi ~ wgt, data = boys), which = 2)
```

## Classes example: plotting with class
```{r, dev.args = list(bg = 'transparent')}
plot(lm(bmi ~ wgt, data = boys), which = 3)
```

## Classes example: plotting with class
```{r, dev.args = list(bg = 'transparent')}
plot(lm(bmi ~ wgt, data = boys), which = 4)
```

## Classes example: plotting with class
```{r, dev.args = list(bg = 'transparent')}
plot(lm(bmi ~ wgt, data = boys), which = 5)
```

## Classes example: plotting with class
```{r, dev.args = list(bg = 'transparent')}
plot(lm(bmi ~ wgt, data = boys), which = 6)
```

## Why is plot different for class `"lm"`?
The function `plot()` is called, but not used. Instead, because the linear model has class `"lm"`, `R` searches for the function `plot.lm()`. 

If function `plot.lm()` would not exist, `R` tries to apply function `plot()` (which would have failed in this case because plot requires `x` and `y` as input)

`plot.lm()` is created by John Maindonald and Martin Maechler. They thought it would be useful to have a standard plotting environment for objects with class `"lm"`. 

Since the elements that class `"lm"` returns are known, creating a generic function class is straightforward.  


# `R`-coding <br> <br> The Google style guide

# Naming conventions

## File Names
File names should end in `.R` and, of course, be meaningful. 

GOOD:
```{r eval=FALSE}
predict_ad_revenue.R
```

<font color="red">BAD: </font>
```{r eval=FALSE}
foo.R
```

## Identifiers

Don't use underscores ( _ ) or hyphens ( - ) in identifiers. Identifiers should be named according to the following conventions. 

1. The preferred form for variable names is all lower case letters and words separated with dots (variable.name), but variableName is also accepted; 
2. function names have initial capital letters and no dots (FunctionName); 
3. constants are named like functions but with an initial k.

## Identifiers (continued)
- variable.name is preferred, variableName is accepted \
  GOOD: `avg.clicks` \
  OK: `avgClicks` \
  <font color="red">BAD: `avg_Clicks`</font>

- FunctionName \
  GOOD: `CalculateAvgClicks` \
  <font color="red">BAD: `calculate_avg_clicks` , `calculateAvgClicks` </font> \
- `kConstantName`

# Syntax

## Line Length

The maximum line length is 80 characters.

```{r}
# This is to demonstrate that at about eighty characters you would move off of the page

# Also, if you have a very wide function
fit <- lm(age ~ bmi + hgt + wgt + hc + gen + phb + tv + reg + bmi * hgt + wgt * hgt + wgt * hgt * bmi, data = boys)

# it would be nice to pose it as
fit <- lm(age ~ bmi + hgt + wgt + hc + gen + phb + tv + reg + bmi * hgt 
          + bmi * wgt + wgt * hgt + wgt * hgt * bmi, data = boys)
#or
fit <- lm(age ~ bmi + hgt + wgt + hc + gen + phb + tv + reg 
          + bmi * hgt 
          + bmi * wgt
          + wgt * hgt 
          + wgt * hgt * bmi, 
          data = boys)
```


## Indentation

When indenting your code, use two spaces. `RStudio` does this for you!

Never use tabs or mix tabs and spaces. 

Exception: When a line break occurs inside parentheses, align the wrapped line with the first character inside the parenthesis.

## Spacing
Place spaces around all binary operators (=, +, -, <-, etc.). 

Exception: Spaces around ='s are optional when passing parameters in a function call.
```{r eval=FALSE}
lm(age ~ bmi, data=boys)
```
or
```{r eval=FALSE}
lm(age ~ bmi, data = boys)
```

## Spacing (continued)
Do not place a space before a comma, but always place one after a comma. 

GOOD:
```{r eval=FALSE}
tab.prior <- table(df[df$days.from.opt < 0, "campaign.id"])
total <- sum(x[, 1])
total <- sum(x[1, ])
```


## Spacing (continued)
<font color="red">BAD:
```{r eval=FALSE}
# Needs spaces around '<'
tab.prior <- table(df[df$days.from.opt<0, "campaign.id"])  
# Needs a space after the comma
tab.prior <- table(df[df$days.from.opt < 0,"campaign.id"])  
# Needs a space before <-
tab.prior<- table(df[df$days.from.opt < 0, "campaign.id"]) 
# Needs spaces around <-
tab.prior<-table(df[df$days.from.opt < 0, "campaign.id"])  
# Needs a space after the comma
total <- sum(x[,1])  
# Needs a space after the comma, not before 
total <- sum(x[ ,1])  
```
</font>

## Spacing (continued)
Place a space before left parenthesis, except in a function call.

GOOD: 
```{r eval=FALSE}
if (debug)
```

<font color="red">BAD:</font>
```{r eval=FALSE}
if(debug)
```

## Extra spacing
Extra spacing (i.e., more than one space in a row) is okay if it improves alignment of equals signs or arrows (<-).
```{r eval = FALSE}
plot(x    = x.coord,
     y    = data.mat[, MakeColName(metric, ptiles[1], "roiOpt")],
     ylim = ylim,
     xlab = "dates",
     ylab = metric,
     main = (paste(metric, " for 3 samples ", sep = "")))

```

Do not place spaces around code in parentheses or square brackets.

Exception: Always place a space after a comma.

## Extra spacing
GOOD:
```{r eval=FALSE}
if (debug)
x[1, ]
```

<font color="red">BAD:</font>
```{r eval=FALSE}
if ( debug )  # No spaces around debug
x[1,]  # Needs a space after the comma 
```

## In general...
- Use common sense and BE CONSISTENT.

- The point of having style guidelines is to have a common vocabulary of coding 
    - so people can concentrate on what you are saying, rather than on how you are saying it. 

- If code you add to a file looks drastically different from the existing code around it, the discontinuity will throw readers out of their rhythm when they go to read it. Try to avoid this.

# Basic data manipulation

## The cats data

Description (see `?cats`): The heart weights (in g) and body weights (in kg) of 144 adult cats (male and female) used for digitalis experiments. Digitalis is a medication used to treat heart failure and certain types of irregular heartbeat.
```{r}
head(cats)
```


```{r}
str(cats)
```

## The cats data

```{r}
summary(cats)
```


## How to get only Female cats?


```{r}
# With dplyr::filter
fem.cats <- dplyr::filter(cats, Sex == "F")

dim(fem.cats)

# With base R:
# fem.cats <- cats[cats$Sex == "F", ]
```

## How to get only *heavy* cats?
```{r}
heavy.cats <- dplyr::filter(cats, Bwt > 3)
dim(heavy.cats)
head(heavy.cats)

# With base R:
# heavy.cats2 <- cats[cats$Bwt > 3, ]
# or:
# heavy.cats3 <- subset(cats, Bwt > 3)
```

## Select cats with specified range of body weights
```{r}
dplyr::filter(cats, Bwt > 2.0 & Bwt < 2.2, Sex == "F")

```


## Working with factors
```{r}
class(cats$Sex)
levels(cats$Sex)
```

## Working with factors

Changing the level names:
```{r}
levels(cats$Sex) <- c("Female", "Male")

table(cats$Sex)
head(cats)
```

## Sorting with `dplyr::arrange()`

`dplyr::arrange()`sorts the rows of a data frame according to the order of one or more of the columns. 

```{r}

# sort cats by body weight (Bwt) from low to high values
sorted.cats <- dplyr::arrange(cats, Bwt)
head(sorted.cats)
```
## Sorting with `dplyr::arrange()`

`dplyr::arrange()`sorts the rows of a data frame according to the order of one or more of the columns. 

```{r}
# Sort the cats by Sex first and within Sex (1=female) by body weight (low to high)
sorted.cats.grouped <- dplyr::arrange(cats, Sex, Bwt)
head(sorted.cats.grouped)
```



## Combining matrices or dataframes
```{r message=FALSE}
# add column with id numbers
ID <- matrix(c(1:144), nrow=144, ncol=1)
```

```{r message=FALSE}
# add variable name for ID variable and change names of other variables
D <- dplyr::bind_cols(ID, cats)
names(D) <- c("ID", "Sex", "Bodyweigt", "Hartweight")
head(D)
```


# Basic analysis
## Correlation

```{r}
cor(cats[, -1])
```
With `[, -1]` we exclude the first column (female/male)

## Correlation

```{r}
cor.test(cats$Bwt, cats$Hwt)
```

What do we conclude?

## Correlation

```{r fig.height=5, fig.width=5, dev.args = list(bg = 'transparent'), fig.align='center'}
plot(cats$Bwt, cats$Hwt)
```

## T-test
Test the null hypothesis that the difference in mean heart weight between male and female cats is 0
```{r}
t.test(formula = Hwt ~ Sex, data = cats)
```

## T-test
```{r fig.height=5, fig.width=5, dev.args = list(bg = 'transparent'), fig.align='center'}
plot(formula = Hwt ~ Sex, data = cats)
```

## Linear regression

Remember the `boys` data from package `mice`. 

If we want to regress BMI (`bmi`) on weight (`wgt`), we would use the `lm()` function and the model formula `bmi ~ wgt`.

```{r echo=FALSE, message=FALSE, error=FALSE, warning=FALSE}
library(mice)
```


```{r}
lm(formula = bmi ~ wgt, data = boys)
```
## Scatterplot

```{r}
plot(formula = bmi ~ wgt, data = boys)
```

## Add a quadratic term
```{r}
lm(formula = bmi ~ wgt + I(wgt^2), data = boys)
```

## Why we need `I()` {.smaller}

Inside an R model formula, the `+`, `:`, and `^` operators are text objects and therefore behave differently than when used in calculations with numeric vectors. Using `I()` converts these operators to their numerical meaning.

```{r}
lm(bmi ~ wgt + wgt^2, data = boys)
lm(bmi ~ wgt + I(wgt^2), data = boys)
```

## Output of the `lm()` class

It is 'nicer' to store the output from the function in an object. The convention for regression models is an object called `fit`.

```{r}
fit <- lm(bmi ~ wgt + I(wgt^2), data = boys)
```

The object `fit` contains a lot more than just the regression weights. To inspect what is inside you can use

```{r}
ls(fit)
```

## Inspecting what is inside `fit`

Another approach to inspecting the contents of `fit` is the function `attributes()`

```{r}
attributes(fit)
```

The benefit of using `attributes()` is that it directly tells you the class of the object.

## Classes in R {.smaller}

```{r}
class(fit)
```

Classes are used for an object-oriented style of programming. This means that you can write a specific function that 

- has fixed requirements with respect to the input. 
- presents output or graphs in a predefined manner.

When a generic function `fun` is applied to an object with class attribute `c("first", "second")`, the system searches for a function called `fun.first` and, if it finds it, applies it to the object.

If no such function is found, a function called `fun.second` is tried. If no class name produces a suitable function, the function `fun.default` is used (if it exists). If there is no class attribute, the implicit class is tried, then the default method.

## Classes example: plotting without class

```{r, dev.args = list(bg = 'transparent')}
plot(bmi ~ wgt, data = boys)
```

## Classes example: plotting with class

```{r, dev.args = list(bg = 'transparent')}
plot(lm(bmi ~ wgt, data = boys), which = 1)
```

## Classes example: plotting with class

```{r, dev.args = list(bg = 'transparent')}
plot(lm(bmi ~ wgt, data = boys), which = 2)
```

## Classes example: plotting with class

```{r, dev.args = list(bg = 'transparent')}
plot(lm(bmi ~ wgt, data = boys), which = 4)
```

## Why is plot different for class `"lm"`?

The function `plot()` is called, but not used. Instead, because the linear model has class `"lm"`, `R` searches for the function `plot.lm()`.

If function `plot.lm()` would not exist, `R` tries to apply function `plot()` (which would have failed in this case because plot requires `x` and `y` as input)

`plot.lm()` is created by John Maindonald and Martin Maechler. They thought it would be useful to have a standard plotting environment for objects with class `"lm"`.

Since the elements that class `"lm"` returns are known, creating a generic function class is straightforward.


# Pipes

## This is a pipe:

```{r message=FALSE}
boys <- 
  read_sav("files/boys.sav") %>%
  head()
```

It effectively replaces `head(read_sav("boys.sav"))`.

## Why are pipes useful?
Let's assume that we want to load data, change a variable, filter cases and select columns. Without a pipe, this would look like
```{r}
boys  <- read_sav("files/boys.sav")
boys2 <- transform(boys, hgt = hgt / 100)
boys3 <- filter(boys2, age > 15)
boys4 <- subset(boys3, select = c(hgt, wgt, bmi))
```

With the pipe:
```{r}
boys <-
  read_sav("files/boys.sav") %>%
  transform(hgt = hgt/100) %>%
  filter(age > 15) %>%
  subset(select = c(hgt, wgt, bmi))
```

Benefit: a single object in memory, the steps are easy to follow and understand. 

## With pipes
Your code becomes more readable:

- data operations are structured from left-to-right and not from in-to-out
- nested function calls are avoided
- local variables and copied objects are avoided
- easy to add steps in the sequence

Keyboard shortcut:

* Windows/Linux: `ctrl + shift + m`
* Mac: `cmd + shift + m`

## What do pipes do:

<center>
![](img/lec-2/flow_pipe.png){width=65%}
</center>

## What do pipes do:

Pipes create functions without nesting:

`f(x)` becomes `x %>% f()`
```{r }
set.seed(123)
mean(rnorm(10))

set.seed(123)
rnorm(10) %>% 
  mean()
```

## Pipes create functions without nesting

`f(x, y)` becomes `x %>% f(y)` 
```{r}
cor(boys, use = "pairwise.complete.obs")

boys %>% 
  cor(use = "pairwise.complete.obs")
```

## Pipes create functions without nesting

`h(g(f(x)))` becomes `x %>% f %>% g %>% h` 
```{r }
max(na.omit(subset(boys, select = wgt)))

boys %>% 
  subset(select = wgt) %>% 
  na.omit() %>% 
  max()
```

## Useful: outlier filtering
```{r}
nrow(cats)

# select the observations that fall outside the +/- SD around the mean
cats.outl <- 
  cats %>% 
  dplyr::filter(Hwt > mean(Hwt) + 3 * sd(Hwt) | Hwt < mean(Hwt) - 3 * sd(Hwt))

nrow(cats.outl)

# select the observations that fall within +/- 3 SD around the mean
cats.without.outl <- 
  cats %>% 
  dplyr::filter(Hwt < mean(Hwt) + 3 * sd(Hwt) & Hwt > mean(Hwt) - 3 * sd(Hwt))

nrow(cats.without.outl)
```
# More pipe stuff



## Pipes and the R model formula `~`

Sometimes the data we want to use, are "piped" in the wrong argument, see e.g.:
```{r eval=FALSE}
cats %>% 
  lm(Hwt ~ Bwt)
```
This leads to an error:

<font color="blue">Error in as.data.frame.default(data) : 

  cannot coerce class ‘"formula"’ to a data.frame</font>

The `%>%` pipe operator is intended to work with functions where each result is forwarded on to the **first** argument of the next function. For the function `lm()` the first argument is the model formula, which is a text object and not the data frame.

## Solution 1
We can use the `.` symbol to act as placeholder for the data:
```{r}
cats %>% 
  lm(Hwt ~ Bwt, data = .)
```

## Solution 2: the exposition `%$%` pipe

<center>
![](img/lec-2/flow_$_pipe.png){width=65%}
</center>

## Solution 2: the exposition `%$%` pipe
The exposition `%$%` pipe exposes the content(s) of the data frame (the variables) to the next function in the pipeline.

```{r}
# Now the code works without need of the placeholder

cats %$% 
  lm(Hwt ~ Bwt)

```

## Debugging pipelines {.smaller}
Sample 3 positions from the alphabet and show the position and the letter. If you don't know what's going on, run each statement separately!
```{r}
set.seed(123)
1:26

set.seed(123)
1:26 %>% 
  sample(3)

set.seed(123)
1:26 %>%
  sample(3) %>%
  paste(., LETTERS[.])

```

## Performing a t-test in a pipe
```{r message=FALSE}
cats %$%
  t.test(Hwt ~ Sex)
```
is the same as 
```{r eval=FALSE}
t.test(Hwt ~ Sex, data = cats)
```

## Storing a t-test from a pipe
```{r}
cats.test <- 
  cats %$%
  t.test(Bwt ~ Sex)

cats.test
```
