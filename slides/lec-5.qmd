---
title: "Functional Programming"
author: 
  - name: Gerko Vink
    orcid: 0000-0001-9767-1924
    email: g.vink@uu.nl
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
date: 9 June 2025
date-format: "D MMM YYYY"
execute: 
  echo: true
format: 
  revealjs:
    theme: [solarized, gerko.scss]
    embed-resources: true
    progress: true
    margin: 0.075
    logo: logo.png 
    toc: false
    toc-depth: 1
    toc-title: Outline
    slide-number: true
    scrollable: false
    width: 1200
    reference-location: margin
    footer: Gerko Vink @ Anton de Kom Universiteit, Paramaribo
    standalone: true
---

## Disclaimer {.smaller}
I owe a debt of gratitude to many people as the thoughts and code in these slides are the process of years-long development cycles and discussions with my team, friends, colleagues and peers. When someone has contributed to the content of the slides, I have credited their authorship.

Images are either directly linked, or generated with StableDiffusion or DALL-E. That said, there is no information in this presentation that exceeds legal use of copyright materials in academic settings, or that should not be part of the public domain. 

::: {.callout-warning}
You **may use** any and all content in this presentation - including my name - and submit it as input to generative AI tools, with the following **exception**:

- You must ensure that the content is not used for further training of the model
:::

## Slide materials and source code
::: callout-tip
# Materials
- lecture slides on Moodle
- course page: [www.gerkovink.com/sur](https://www.gerkovink.com/sur)
- source: [github.com/gerkovink/sur](https://github.com/gerkovink/sur)
:::

## Recap

Gisteren hebben we deze onderwerpen behandeld:

- Beschrijvende statistiek
- Kruistabellen en frequentieverdelingen
- $\chi ^2$-toets
- Andere toets- en associatiematen
- Simpele lineaire regressie
- Analyses draaien op groepen

## Today
Vandaag behandelen we de volgende onderwerpen:

- Zelf functies ontwikkelen, gebruiken en debuggen
- Map / Reduce workflows
- Binaire operators
- Trekken uit verdelingen
- Random number generation

## Packages we use
```{r}
library(dplyr)    # data manipulation
library(purrr)    # functional programming
library(furrr)    # parallel processing
library(magrittr) # flexible pipes
library(mice)     # for the boys data

# fix the random seed
set.seed(123)
```

# Writing functions

## Write your own function

The function is `function()`

```{r eval=F}
my_function <- function(arguments) {
  
  expressions       
  
  return(output)   
                  
}
```

-   `arguments` are input of the function

-   `expressions` are operations performed on the arguments

-   `output` an object containing the output (e.g. vector, matrix, list, etc.)

-   `return` explicit return of the output (optional, but recommended!)

```{r eval=F}
my_function <- function(arguments) {
  
  expressions       
  
  output # less clear that this is returned
                  
}
```

## Tossing a die

A function without arguments that simulates tossing a die

```{r}
die <- function() {
  # throw die
  eyes <- sample(1:6, size = 1)
  # return the outcome
  return(eyes)
}
```

```{r}
c(die(), die(), die())
```

## Defining an argument

The argument `n` specifies the number of throws of the die

```{r}
dice <- function(n) {
  # n is the number of dice to toss
  # replace = TRUE allows for repeated outcomes
  # returns a vector of length n
  return(sample(1:6, size = n, replace = TRUE))
}

dice(10)
```

## Multiple returns

A function `dice(n)` returning a list with

-   the outcomes of the `n` throws, their frequencies and their mean

```{r}
dice <- function(n) {
  # throw dice n times
  eyes <- sample(1:6, size = n, replace = TRUE) 
  # prepare structured output
  return(list(outcomes = eyes,
              freqs    = table(eyes),
              mean     = mean(eyes)))
}
dice(10)
```

## Default arguments

The default is a fair die (each outcome has probability 1/6)

-   the user can change this if so desired

```{r}
dice <- function(n, p = rep(1/6, 6)) {
  # throw dice n times with probability p
  eyes <- sample(1:6, size = n, replace = TRUE, prob = p)
  # prepare structured output
  return(list(outcomes  = eyes,
              frequency = table(eyes),
              mean      = mean(eyes)))
}
dice(100)
```

## Unfair dice

The following command throws 100 unfair dice

-   probabilities for rolling a 1, 2, 3, 4, 5 is 0.1
-   probability for rolling a 6 is 0.5

```{r}
c(rep(.1, 5), .5)
dice(100,  p = c(rep(.1, 5), .5))
```

# Applying your function

## `apply()`
The `apply()` function is used to apply a function to the rows or columns of a matrix or array. It takes three main arguments: the data, the margin (1 for rows, 2 for columns), and the function to apply.
```{r}
calc_mean <- function(x) {
  return(mean(x, na.rm = TRUE))
}
# select random 10 rows from the numeric columns of boys
numboys <- boys %>% select(where(is.numeric))
which_rows <- sample(1:nrow(numboys), 10)
numboys <- numboys[which_rows, ]
# over the columns
apply(numboys, FUN = calc_mean, MARGIN = 2)
# over the rows
apply(numboys, FUN = calc_mean, MARGIN = 1)
```
## `lapply()`
`lapply()` does the same as `apply()`, but it is used for lists. It applies a function to each element of a list and returns a list of results.

```{r}
lapply(numboys, FUN = calc_mean)
```

## `sapply()`
`sapply()` does the same as `lapply()`, but it simplifies the output to a vector or matrix if possible. It is useful when you want to avoid dealing with lists.

```{r}
sapply(numboys, FUN = calc_mean)
```

## `tapply()`
`tapply()` is used to apply a function to subsets of a vector, grouped by one or more factors. It is particularly useful for summarizing data based on grouping variables.
```{r}
tapply(boys$hgt, boys$reg, FUN = calc_mean)

boys %>% 
  group_by(reg) %>% 
  summarise(mean_hgt = mean(hgt, na.rm = TRUE))
```

# Map / Reduce

## `map()`

The `map()` function is part of the `purrr` package, which is designed for functional programming in R. It allows you to apply a function to each element of a list or vector, returning a list of results.

```{r}
boys %>% 
  split(.$reg) %>% # split the data by region
  map(~ lm(hgt ~ age, data = .x) %>% # map the linear model function
        coef()) # extract coefficients
```
## `split()`
```{r}
boys %>% 
  split(.$reg)
```

## `map()`

The `map()` function is particularly useful for iterating over lists or vectors and applying a function to each element. It can be used to perform operations like calculations, transformations, or data extraction.

```{r}
out <- boys %>% 
  split(.$reg) %>% # split the data by region
  map(~ lm(hgt ~ age, data = .x) %>% # map the linear model function
        coef()) # extract coefficients

is.list(out)
names(out)
out$city
```

## `map()` on large lists
In the below example, we take a bootstrap sample (with replacement) from the `boys` data 1000 times, and then run a simple linear model on all 1000 bootstrap samples seperately. 
```{r}
sample_rows <- function(x) {
  out <- x[sample(1:nrow(x), replace = TRUE), ] 
  return(out)
}
samples <- replicate(n = 1000, expr = sample_rows(boys), simplify = FALSE)
samples_lm <- 
  samples %>% 
  map(~.x %$% 
        lm(hgt ~ age) %>% 
        coef())
```

## `map()` on large lists
```{r}
# how many samples?
length(samples)
# what is the first sample?
samples[[1]] %>% slice_head()
# what is the first sample's linear model?
samples_lm[[1]]
# what are the first three samples' linear model?
samples_lm[1:3]
```

## `Reduce()`
With `reduce()`, you can combine the results obtained with `map()`.
```{r}
reduce(samples_lm, `+`) # sum of lm coefficients
reduce(samples_lm, `+`) / 1000 # average lm coefficients
```

## structuring the output of `map()`
`map()` returns a list, which can be structured into a data frame using `map_df()`. This is useful when you want to convert the results of `map()` into a tidy format.

```{r}
# with map_df() instead of map() to return a data frame
samples %>% 
  map_df(~.x %$%  
           lm(hgt ~ age) %>% 
           coef())
```

## structuring the output of `map()`
```{r}
# with map_df() if an object already exists as a list
samples_lm %>% 
  map_df(~tibble(intercept = .x[1], slope = .x[2]))
```



## futures

- The `future` package enables **asynchronous** and **parallel** processing in R.
- It allows R to perform tasks **in the background**, freeing up your current R session.
- Ideal for:
  - Speeding up long-running computations
  - Running tasks concurrently
  
### Why Use `future`?

- Normally, R runs code **line-by-line** (sequentially).
- `future` lets you run tasks **in parallel**, improving efficiency.
- Example use cases:
  - Simulations
  - Data processing across multiple cores
  - Web scraping multiple pages
  
## `future_map()`
The `future_map()` function is part of the `furrr` package, which integrates the `future` package with the `purrr` package's mapping functions.

It allows you to apply a function to each element of a list or vector in parallel, making it easier to handle large datasets or computationally intensive tasks.
```{r}
# Set up parallel processing
plan(multisession) # Use multiple cores for parallel processing
samples %>% 
  future_map_dfr(~.x %$% 
           lm(hgt ~ age) %>% 
           coef())
plan(sequential) # Stop parallel processing and reset to sequential processing
```

## `future_map()`
The `future_map()` function is part of the `furrr` package, which integrates the `future` package with the `purrr` package's mapping functions.

It allows you to apply a function to each element of a list or vector in parallel, making it easier to handle large datasets or computationally intensive tasks.
```{r}
# Set up parallel processing
plan(multisession) # Use multiple cores for parallel processing
samples %>% 
  future_map_dfc(~.x %$% 
           lm(hgt ~ age) %>% 
           coef())
plan(sequential) # Stop parallel processing and reset to sequential processing
```

# Binairy operators like `%in%` and `%>%`

## How binairy operators work
Binary operators are functions that take two arguments and return a single value. In R, you can create your own binary operators using the `"%operator%"` syntax.

```{r}
`%my_operator%` <- function(x, y) {
  # perform some operation on x and y
  result <- x + y  # example operation: addition
  return(result)
}

4 %my_operator% 5
1:4 %my_operator% 5:8
```

Binary operators allow you to write the function in a more natural way, similar to mathematical notation. You can use them for various operations, such as addition, subtraction, multiplication, or any custom operation you define.

# Drawing from distributions

## Normal distribution
```{r}
# Draw 10000 random numbers from a normal distribution
normals <- rnorm(10000, mean = 0, sd = 1)
# Plot the histogram of the random numbers
hist(normals, 
     breaks = 30, 
     main = "Histogram of Random Normal Numbers", 
     xlab = "Value", 
     ylab = "Frequency")
```


## Uniform distribution
```{r}
# Draw 10000 random numbers from a uniform distribution
uniforms <- runif(10000, min = 0, max = 1)
# Plot the histogram of the random numbers
hist(uniforms, 
     breaks = 80, 
     main = "Histogram of Random Uniform Numbers", 
     xlab = "Value", 
     ylab = "Frequency")
```

# Random number generators

## How PRNGs work
Pseudo Random Number Generators (PRNGs) are algorithms that generate sequences of numbers that approximate the properties of random numbers. They are called "pseudo" because they are deterministic and can be reproduced if the initial state (seed) is known.

```{r}
# fix the seed
set.seed(123)
# draw 10 random integers between 1 and 100 without replacement
sample(1:100, size = 10, replace = FALSE)
# fix the seed again
set.seed(123)
# draw 10 random integers between 1 and 100 without replacement
sample(1:100, size = 10, replace = FALSE)
# draw the same 10 random numbers in sets of 5
set.seed(123)
sample(1:100, size = 5, replace = FALSE)
sample(1:100, size = 5, replace = FALSE)
```
BEWARE: once you fix the random seed, everything that uses random numbers will become seed-dependent. Your findings can be accidental. Always replicate with another seed!

## How PRNGs work
Pseudo Random Number Generators (PRNGs) are algorithms that generate sequences of numbers that approximate the properties of random numbers. They are called "pseudo" because they are deterministic and can be reproduced if the initial state (seed) is known.

```{r}
# draw 10 numbers
set.seed(123)
rnorm(10)
# draw 10 numbers in sets of 5
set.seed(123)
rnorm(5)
rnorm(5)
# draw 15 numbers in two sets, where the first set is 5 numbers
set.seed(123)
rnorm(5)
rnorm(10)
```

## Replication vs reproduction
Reproduction is the process of running the same analysis with the same data and code to see if the results can be exactly replicated.
```{r}
# reproduction
set.seed(123)
rnorm(10) %>% mean()
set.seed(123)
rnorm(10) %>% mean()
```

Replication is the process of running the same analysis on a different dataset or in a different context to see if the results are consistent. 
```{r}
# replication WITH reproduction
set.seed(123)
rnorm(10) %>% mean()
set.seed(124)
rnorm(10) %>% mean() 
```



# Practical
