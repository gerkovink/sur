---
title: "Data manipulation"
subtitle: "`tidyverse`, grouping and formulas"
author: 
  - name: Gerko Vink
    orcid: 0000-0001-9767-1924
    email: g.vink@uu.nl
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
  - name: Statistical programming with R team
    orcid: 0000-0001-9767-1924
    email: no email
    affiliations:
      - name: Summerschool @ Utrecht University
date: 5 June 2025
date-format: "D MMM YYYY"
execute: 
  echo: true
format: 
  revealjs:
    theme: [solarized, gerko.scss]
    embed-resources: true
    progress: true
    margin: 0.075
    logo: logo.png 
    toc: false
    toc-depth: 1
    toc-title: Outline
    slide-number: true
    scrollable: false
    width: 1200
    reference-location: margin
    footer: Gerko Vink @ Anton de Kom Universiteit, Paramaribo
    standalone: true
    smaller: true
---

## Disclaimer {.smaller}

I owe a debt of gratitude to many people as the thoughts and code in these slides are the process of years-long development cycles and discussions with my team, friends, colleagues and peers. When someone has contributed to the content of the slides, I have credited their authorship.

Images are either directly linked, or generated with StableDiffusion or DALL-E. That said, there is no information in this presentation that exceeds legal use of copyright materials in academic settings, or that should not be part of the public domain.

::: callout-warning
You **may use** any and all content in this presentation - including my name - and submit it as input to generative AI tools, with the following **exception**:

-   You must ensure that the content is not used for further training of the model
:::

## Slide materials and source code

::: callout-tip
# Materials

-   lecture slides on Moodle
-   course page: [www.gerkovink.com/sur](https://www.gerkovink.com/sur)
-   source: [github.com/gerkovink/sur](https://github.com/gerkovink/sur)
:::

## Recap

Gisteren hebben we deze onderwerpen behandeld:

-   Importeren en bestuderen van datasets
-   Begrijpen en toepassen van verschillende datatypes en database formats
-   Variabelen labelen en (her)coderen
-   De blauwdruk van R: frames en environments
-   Pipes
-   Formules gebruiken in functies

## Today

Vandaag leren we:

-   Het combineren van datasets
-   Groeperen en aggregeren
-   Nieuwe variabelen creÃ«ren
-   Filteren en sorteren van gegevens
-   Het maken en aanpassen van datagroepen
-   Clustering van gegevens

## Packages we use

```{r warning=FALSE, message=FALSE}
library(tibble)   # tibbles variation on data frames
library(dplyr)    # data manipulation
library(magrittr) # pipes
library(tidyr)    # data tidying
library(stringr)  # string manipulation
library(psych)    # descriptive statistics
```

```{r include=FALSE}
knitr::opts_chunk$set(message = FALSE, comment = "")

```

```{r echo=F}
# Ensures the package "pacman" is installed
if (!require("pacman")) install.packages("pacman")

pacman::p_load(tidyverse,
               ggplot2
               )
```

## Make some data

```{r prepare data, echo=T}
planet <- c("Mercury", "Venus", "Earth", "Mars", 
            "Jupiter", "Saturn", "Uranus", "Neptune")
planet_type <- c("Terrestrial planet", "Terrestrial planet", 
                 "Terrestrial planet", "Terrestrial planet", "Gas giant", 
                 "Gas giant", "Gas giant", "Gas giant")
diameter <- c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)
rotation <- c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)
rings    <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
planets <- data.frame(planet_type = factor(planet_type), 
                      diameter, rotation, rings, 
                      row.names = planet)
planets
```

# Descriptive statistics

## `psych::describe()`
```{r}
planets %>% 
  describe(check = TRUE) # converts non-numerical variables
```

## `psych::describe()`
```{r}
planets %>% 
  describe(omit = TRUE) # omits non-numerical variables
```

# Datasets combineren

## Joining data

```{r}
band_members
band_instruments
```

## Inner join

With an inner join, we combine two data frames based on a common key. Only the rows with matching keys in both data frames are kept.

```{r}
band_members %>% inner_join(band_instruments)
```

## Left join

With a left join, we keep all rows from the left data frame and only the matching rows from the right data frame. If there is no match, the result will contain `NA` for the columns from the right data frame.

```{r}
band_members %>% left_join(band_instruments)
```

## Right join

With a right join, we keep all rows from the right data frame and only the matching rows from the left data frame. If there is no match, the result will contain `NA` for the columns from the left data frame.

```{r}
band_members %>% right_join(band_instruments)
```

## Full join

With a full join, we keep all rows from both data frames. If there is no match, the result will contain `NA` for the columns from the other data frame.

```{r}
band_members %>% full_join(band_instruments)
```

# The tidyverse packages

## `tidyverse` and the data analysis cycle

![](img/lec-3/tidyverse.png){width="70%"}

## Tidyverse and the verbs of data manipulation

Leading principle: language of programming should really behave like a language, tidy**verse**.

<br>

tidyverse: a few key **verb** that perform common types of data manipulation.

## Tidy data

The `tidyverse` packages operate on *tidy* data:

1.  Each column is a **variable**

2.  Each row is an **observation**

3.  Each cell is a single **value**

<br>

```{r echo=FALSE, fig.align="center", out.width="70%", fig.cap="Untidy versus tidy data"}
knitr::include_graphics("img/lec-3/tidy.png")
```

# The `dplyr` package

## Data manipulation with `dplyr`

The *dplyr* package is a specialized package for working with `data.frames` (and the related `tibble`) to transform and summarize tabular data:

-   summary statistics for grouped data
-   selecting variables
-   filtering cases
-   (re)arranging cases
-   computing new variables
-   recoding variables

## `dplyr` cheatsheet

![](img/lec-3/Dplyr_CheatSheet.png)

## Common `dplyr` functions

There are many functions available in dplyr, but we will focus on just the following `dplyr` functions (verbs):

| dplyr verbs | Description |
|----------------------------|--------------------------------------------|
| `glimpse()` | a transposed print of the data that shows all variables |
| `select()` | selects variables (columns) based on their names |
| `filter()` | subsets the rows of a data frame based on their values |
| `arrange()` | re-order or arrange rows |
| `mutate()` | adds new variables, or new variables that are functions of existing variables |
| `summarise()` | creates a new data frame with statistics of the variables (optional grouped by another variables) |
| `group_by()` | allows for group operations in the "split-apply-combine" concept |

Check the [`dplyr` cheat sheet](https://rstudio.github.io/cheatsheets/data-transformation.pdf) for examples.

## `dplyr::glimpse()`

-   Prints a transposed version of the data: variables are the rows, observations are the columns.
-   Makes it possible to see every column in a data frame.
-   It is similar to `str()`, but shows more data.
-   `str()` shows more detailed information about data structure.

```{r , echo=T, collapse=T}
glimpse(planets)
str(planets)
```

# Compute new variables

## Compute new variables with `dplyr::mutate()`

```{r include=T, echo=T, eval=F}
data %>% 
  dplyr::mutate(..., .keep = c("all", ...), .before = NULL, .after = NULL)
```

<br>

```{r}
planets %>% 
  mutate(rotation_diameter = rotation/diameter, .keep = "all") %>%
  glimpse()
```

## Temporary / permanent changes

The pipe operations do not make changes to the original data set, unless you save the results:

**Temporary:**

```{r eval=FALSE}
planets %>% 
  mutate(rotation_diameter = rotation/diameter)

```

```{r}
names(planets)
```

**Changes saved in new data frame:**

```{r collapse=T}
new_data_set <- planets %>% 
  mutate(rotation_diameter = rotation/diameter) 
names(new_data_set)
```

## Remember the `%<>%` pipe?

We could have used the `%<>%` pipe to save the changes to the original data frame directly:

**Changes saved in new data frame:**

```{r eval = FALSE, collapse=T}
planets %<>% 
  mutate(rotation_diameter = rotation/diameter) 
names(new_data_set)
```

You should only do so if the intend is to overwrite the original set. 

# Filtering and sorting

## Select columns with `dplyr::select()`

Select variables `type` and `diameter` from the planets data frame:

```{r}
planets %>% 
  select(planet_type, diameter)
```

## Select numeric columns with `dplyr::select()`

Select numerical variables with `where(is.numeric)`:

```{r}
planets %>% 
  select(where(is.numeric))
```

## Select factor columns with `dplyr::select()`

Select numerical variables with `where(is.factor)`:

```{r}
planets %>% 
  select(where(is.factor))
```

## Select rows with `dplyr::filter()`

Selects subsets of the rows of a data frame based on their values.

Filter the data based on the planets that have a ring and that are gas giants:

```{r}
planets %>% 
  filter(rings == TRUE, 
         planet_type == "Gas giant")
```

## Select rows and columns

Select diameter only for the planets that have a ring and that are gas giants:

```{r}
planets %>% 
  select(diameter) %>% 
  filter(rings == TRUE, 
         planet_type == "Gas giant")
```

## Selecting specific columns

Select diameter only for the planets that have a ring and that are gas giants:

```{r}
planets %>% 
  select(starts_with("r")) # selects all columns that start with "r" 
```

## Moving rownames to columns

To move the row names to a column, you can use `rownames_to_column()` from the `tibble` package:

```{r}
planets %>% 
  rownames_to_column(var = "planet_name") %>% 
  select(planet_name, diameter, rings)
```

## Selecting specific rows

In this case, we want to select the planets that start with the letter "M". We first use the `rownames_to_column()` function to move the row names to a column, and then we use `filter()` with `stringr::str_starts()` to select the rows:

```{r}
planets %>% 
  rownames_to_column(var = "planet_name") %>% 
  filter(stringr::str_starts(planet_name, "M"))  
```

We cannot use `starts_with()` here, because it only works for column names, not for values in a column.

# Sorting data

## Re-order rows with `dplyr::arrange()`

Order the rows of the `planets` data set on ascending values of `diameter`:

:::: {.columns}

::: {.column width="50%"}

Original data set:

```{r}
# just the planets data
planets
```
:::

::: {.column width="50%"}
Ordered data set, based on diameter:

```{r }
planets %>% 
  dplyr::arrange(diameter)
```
:::

::::

## Multiple transformations: base R and `dplyr`

Suppose we want to perform the following transformations:

1.  Sort the rows of `planets` on ascending values of `rotation`
2.  Select only planets with diameter `> 1`
3.  Display the variables `planet_type`, `diameter` and `rotation`

:::: {.columns}

::: {.column width="50%"}
**With base R code:**

```{r}
subset(planets[order(planets$rotation), ],  
       subset = diameter > 1, 
       select = c(planet_type, diameter, 
                  rotation))
```
:::
::: {.column width="50%"}
**With `dplyr` and the pipe `%>%` operator**

```{r}
planets %>% 
  filter(diameter > 1) %>% 
  arrange(rotation) %>% 
  select(planet_type, diameter, rotation)
```
:::
::::

## Summary statistics with `summarise()`

The `dplyr` function for summarizing data:

```{r}
planets %>% 
  summarise(
    mean_diameter = mean(diameter), 
    sd_diameter = sd(diameter)
  )
```

-   Various summary function(s):
    -   `mean()`, `median()`, `sd()`, `var()`, `sum()`, for numeric variables
    -   `n()`, `n_distinct()` for counts
    -   many others, see: `?dplyr::select` and [cheat sheet](https://rstudio.github.io/cheatsheets/data-transformation.pdf))

## Summaries for groups with `group_by()`

The `dplyr` function for grouping rows of a data frame is very useful in combination with `summarise()`

Example: group the planets based on having rings (or not) and compute the mean and the standard deviation for each group.

```{r}
planets %>% 
  group_by(rings) %>%
  summarise(
    mean_diameter = mean(diameter), 
    sd_diameter = sd(diameter)
  )
```

# Standard solves for missing values

## Dealing with missing values in `R`

Calculations based on missing values (NA's) are not possible in `R`:

```{r , collapse=T, echo=T}
variable <- c(1, 2, NA, 4, 5)
mean(variable)
```

There are two easy ways to perform "listwise deletion":

```{r collapse=T, echo=T}
mean(variable, na.rm = TRUE)
mean(na.omit(variable))
```

## Dealing with missing values with `dplyr`

```{r echo=F}
score <- c(1, 2, NA, 4, 5)
df <- data.frame(score)
```

```{r collapse=T}
df$score
```

::: columns-2
No solution for missing values:

```{r}
df %>% 
  summarise(
    mean_variable = mean(score), 
    sd_variable = sd(score)
  )
```

Use `na.rm = TRUE`:

```{r}
df %>% 
  summarise(
    mean_variable = mean(score, na.rm = TRUE), 
    sd_variable = sd(score, na.rm = TRUE)
  )
```
:::

## Style guide for coding pipes

Code with a single pipe operator on one line and spaces around `%>%`:

```{r include=T, echo=T, eval=F}
data %>% select(X)
```

Code with multiple pipe operators on multiple lines:

```{r include=T, echo=T, eval=F}
data %>% 
  group_by(X) %>% 
  filter(Y > 4) %>% 
  summarise(mean(Y))
```

but definitely NOT:

```{r include=T, echo=T, eval=F}
data%>%group_by(X)%>%filter(Y>4)%>%summarise(mean(Y))
```

## More about coding style: `tidyverse` style guide

[https://style.tidyverse.org/index.html](https://style.tidyverse.org/index.html)

# Practical
