# Data Visualisatie {#sec-mt7}

---
author: 
  - name: "Gerko Vink"
    orcid: "0000-0001-9767-1924"
    email: g.vink@uu.nl
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
  - name: "Erik-Jan van Kesteren"
    orcid: "0000-0003-1548-1663"
    email: g.vink@uu.nl
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
format:
  html:
    highlight-style: github
    number-sections: false
    toc: true
    toc-depth: 3
    code-fold: true
--- 

::: callout-tip
## Hoorcollege 12 juni 2025

> A picture says more than a thousand words

Aan het bovenstaande adage zullen we vandaag veel aandacht besteden. We duiken in de rationale achter de *gramatica van afbeeldingen* en zullen dit ons eigen gaan maken. We behandelen verschillende visualizatie benaderingen en zullen zien dat *less is more* een goed uitgangspunt is. De collegeslides voor deze week kunt u [hier vinden](slides/lec-7.html)
:::

## Practical
```{r echo=FALSE}
printAnswers <- TRUE

```

---

The following packages are required for this practical:

```{r, message=FALSE}
library(dplyr)
library(magrittr)
library(mice)
library(ggplot2)
```

and if you'd like the same results as I have obtained, you can fix the random seed

```{r}
set.seed(123)
```

---

1. **Create a scatterplot between `age` (x-axis) and `bmi` (y-axis) in the `mice::boys` data set**

With the standard plotting device in `R`:

```{r }
mice::boys %$% plot(bmi ~ age)
```

or, with `ggplot2`:

```{r }
mice::boys %>% 
  ggplot(aes(x = age, y = bmi)) +
  geom_point()
```

Package `ggplot2` offers far greater flexibility in data visualization than the standard plotting devices in `R`. However, it has its own language, which allows you to easily expand graphs with additional commands. To make these expansions or layers clearly visible, it is advisable to start with the pipe and to use a `+` to indicate each seperate *layer*.

---

2. **Now recreate the plot with the following specifications:**

- If `bmi < 18.5` use `color = "lightblue"` and label `underweight`
- If `bmi > 18.5 & bmi < 25` use `color = "lightgreen"` and label `healthy`
- If `bmi > 25 & bmi < 30` use `color = "orange"` and label `overweight`
- If `bmi > 30` use `color = "red"` and label `obese`

Hint: it may help to expand the data set with a new variable, for example with `mutate()` and `case_when()`. 

It may be easier to create a new variable that creates the specified categories. We can use the `case_when()` function to do this quickly with `mutate()`. I store the resulting object as `boys2`, because I will show multiple ways of creating this plot:

```{r }
boys2 <- boys %>% 
  mutate(class = case_when(
    bmi < 18.5 ~ "underweight",
    bmi >= 18.5 & bmi < 25 ~ "healthy",
    bmi >= 25 & bmi < 30 ~ "overweight",
    bmi >= 30 ~ "obese"
  ))
boys2 %>% glimpse() # see that class has been added
boys2$class %>% table(useNA = "always") # see the distribution of the new class variable
```

The `boys2` data set now has a new variable `class` that contains the specified categories. We see that 21 cases have missings for `bmi` and therefore have not received a class label. 

With the standard plotting device in `R` we can now use this column and specify:

```{r }
plot(bmi ~ age, subset = class == "underweight", col = "lightblue", data = boys2, 
     ylim = c(10, 35), xlim = c(0, 25))
points(bmi ~ age, subset = class == "healthy", col = "lightgreen", data = boys2)
points(bmi ~ age, subset = class == "overweight", col = "orange", data = boys2)
points(bmi ~ age, subset = class == "obese", col = "red", data = boys2)
```

and with `ggplot2` we can call

```{r }
boys2 %>%
  ggplot() +
  geom_point(aes(x = age, y = bmi, col = class))
```

Although the different classifications have different colours, the colours are by default not conform the specifications of this exercise. We can manually override this:

```{r }
boys2 %>%
  ggplot() +
  geom_point(aes(x = age, y = bmi, col = class)) +
  scale_color_manual(values = c("lightblue", 
                                "lightgreen", 
                                "orange", 
                                "red"))
```

Because there are missing values, `ggplot2` displays a warning message. If we would like to not consider the missing values when plotting, we can simply exclude the `NA`s by using a `filter()`:

```{r}
boys2 %>% 
  filter(!is.na(class)) %>%
  ggplot() +
  geom_point(aes(x = age, y = bmi, col = class)) +
  scale_color_manual(values = c("lightblue", 
                                "lightgreen", 
                                "orange", 
                                "red"))
```

Specifying a filter on the feature `class` is sufficient: age has no missings and the missings in `class` directly correspond to missing values on `bmi`. Filtering on `bmi` would therefore yield an identical plot.

---

3. **Create a histogram for `age` in the `boys` data set. If you use the `hist()` function, play around with the `breaks` argument. If you use `geom_histogram()`, play around with the `binwidth` argument. **

With the standard plotting device in `R`:

```{r }
boys %$%
  hist(age, breaks = 50)
```

The `breaks = 50` overrides the default breaks between the bars. By default the plot would be

```{r }
boys %$%
  hist(age)
```
Using a pipe is a nice approach for this plot because it inherits the names of the objects we aim to plot. Without the pipe we might need to adjust the main title for the histogram:

```{r }
hist(boys$age, breaks = 50)
```

With `ggplot2`:

```{r }
boys %>%
  ggplot() + 
  geom_histogram(aes(x = age), binwidth = .4)
```

Please note that the plots from `geom_histogram()` and `hist` use different calculations for the bars (bins) and hence may look slightly different.

---

4. **Create a bar chart for `reg` in the boys data set**
With a standard plotting device in `R`:

```{r }
boys %$%
  table(reg) %>%
  barplot()
```

With `ggplot2`:

```{r }
boys %>%
  ggplot() + 
  geom_bar(aes(reg))
```

Note that `geom_bar` by default plots the `NA`'s, while `barplot()` omits the `NA`'s without warning. If we would not like to plot the `NA`s, then a simple `filter()` (see exercise 2) on the `boys` data is efficient. 

---

5. **Create a box plot for `hgt` with different boxes for `reg` in the `boys` data set**
With a standard plotting device in `R`:

```{r }
boys %$%
  boxplot(hgt ~ reg)
```

With `ggplot2`:

```{r }
boys %>%
  ggplot(aes(x = reg, y = hgt)) +
  geom_boxplot()

# This does not work!
#boys %$%
#  ggplot(aes(reg, hgt)) +
#  geom_boxplot()
```

---

6. **Create a density plot for `age` with different curves for boys from the `city` and boys from rural areas (`!city`).**
With a standard plotting device in `R`:

```{r }
d1 <- boys %>%
  subset(reg == "city") %$%
  density(age)
d2 <- boys %>%
  subset(reg != "city") %$% 
  density(age)

plot(d1, col = "red", ylim = c(0, .08)) 
lines(d2, col = "blue") 

```

The above plot can also be generated without pipes, but results in an *ugly* main title. You may edit the title via the `main` argument in the `plot()` function.

```{r }
plot(density(boys$age[!is.na(boys$reg) & boys$reg == "city"]), 
     col = "red", 
     ylim = c(0, .08))
lines(density(boys$age[!is.na(boys$reg) & boys$reg != "city"]), 
      col = "blue")
```

With `ggplot2` everything looks much nicer:

```{r }
boys %>%
  mutate(area = ifelse(test = reg == "city", 
                       yes = "city", 
                       no = "rural")) %>%
  filter(!is.na(area)) %>%
  ggplot(aes(x = age, 
             fill = area)) +
  geom_density(alpha = .3) # not necessary, but nicer with some transparency
```

---

End of Practical

---

#### Useful References

[The `ggplot2` reference page](https://ggplot2.tidyverse.org/reference/index.html)


---


