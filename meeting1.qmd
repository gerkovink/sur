# Introductie in R & RStudio {#sec-mt1}

---
subtitle: "Let's get started with a career in `R`"
author: 
  - name: "Gerko Vink"
    orcid: "0000-0001-9767-1924"
  - name: "Laurence Frank"
    orcid: "0000-0002-4075-8129"
format:
  html:
    highlight-style: github
    number-sections: false
    toc: true
    toc-depth: 3
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

::: callout-tip
## Hoorcollege 2 juni 2025
We beginnen vandaag met `R` en `RStudio`. We zullen leren om deze software efficient te gebruiken en we gaan werken in projecten. Dit is belangrijk omdat een gestructureerde werkomgeving het mogelijk maakt om met anderen samen te werken aan hetzelfde project. We beginnen vandaag ook meteen met `storytelling` en zullen daar het publicatieplatform [`Quarto`]() voor gebruiken. De slides voor het hoorcollege kunt u [hier vinden](slides/lec-1.html).
:::

::: callout-note
## Lesstof
De volgende taken moeten voorafgaand het college voltooid zijn:

-   installeer [R](https://cran.r-project.org/)
-   installeer [RStudio](https://posit.co/download/rstudio-desktop/)
-   installeer [Quarto](https://quarto.org/) door onderstaande code in de `R` console te evalueren:

```{r eval = FALSE}
install.packages("quarto", dependencies = TRUE)
```

- lees [R for Data Science, hoofdstuk 1](https://r4ds.had.co.nz/)
:::

## Practical 1

In this practical you will get acquainted with `R`, `RStudio` and `Quarto`.

In general for all practicals in this course: aim to make the exercises without looking at the answers and use the solutions file ("Practical 1: solutions") to evaluate your work. However, do not 'struggle' too long because you will run out of time.

**In any case, ask for help when you feel help is needed.**

### Create an `R Project`

1. Go to today's course chapter: @sec-mt1. If you can read this, you should already be at the right location. 
2. Download the [Practical_1_template.qmd](documents/mt1/Practical_1_Template.qmd) file and save it in a new folder with name "RCourse", for example.
3. Open `RStudio` and choose File -> New Project. Choose the option "Existing Directory". Find the Project Working Directory, the folder "RCourse" you just created. Click on "Create project".
4. Open the "Practical_1_template.qmd" with File -> Open File. 
5. Continue below to complete the exercises in the template file.

## Introduction to `RStudio` and `Quarto`

### A closer look at `RStudio`

RStudio is divided in 4 panes, as shown in the lecture, slide 9:

1.  The **editor pane**, where we create R code and text. This is the pane where the current file, Practical_A_template.Rmd is located.
2.  The **console pane** where code is processed.
3.  The **environment/history pane**.
4.  The **output pane** where we can access our files, plots, the help files, make packages and view our data objects.

### The editor pane and `Quarto`

This is an `Quarto` file. `Markdown` is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. A `Markdown` file has three components:

1.  On top of the document, a YAML part, which defines the markup of the document. YAML stands for Yet Another Markup Language/ Ain't Markup Language.
2.  Text part, where you can create plain text.
3.  The code chunks, where you type `R` code (but you can also choose another programming language such as Python).

#### Getting help on `Quarto`
To learn more about `Quarto` and to get help with the options, see: 
Markdown Quick Reference in `RStudio`, see menu `Help` -> `Markdown Quick Reference`. This will open the reference document in the output pane in the tab "Help". 

### Exercise 1: try a few options in `Quarto` plain text

Take a look at the `Markdown Quick Reference` in `R Studio` and try the following:

1. Add a Level 1 Header called "This is a Header 1" to this document.
2. Add a Level 2 sub-header with name "Sub-header 1".
3. Create some plain text and mark some part of the text bold or italic. 
4. Include the hyperlink to the `Quarto` reference page: [https://quarto.org](https://quarto.org)
5. Compile this document as a `html` file. Use the <kbd>![](https://github.com/quarto-dev/quarto-web/blob/main/docs/get-started/hello/images/rstudio-render-button.png?raw=true){width="25" height="20"}</kbd> **Render** button in the RStudio IDE to render the file and preview the output with a single click or keyboard shortcut (⇧⌘K).

![](https://github.com/quarto-dev/quarto-web/blob/main/docs/get-started/hello/images/rstudio-render.png?raw=true){.border fig-alt="Top of the text editor in RStudio with the Render button highlighted with a purple box." fig-align="center"}

6. Verify how the headers and the hyperlink look like. Instead of knitting, it is also possible to get a preview by clicking on "Visual" in the left upper corner of the editor pane. Try both options.

The benefit of using html as an output format lies in the dimensional properties of a web-page. Especially when dealing with long code-files, large output from analyses or many graphs, exporting your file as html is much more convenient. You can simply scroll down or up to see the 'rest', instead of having to flip through pages back and forth to compare code, graphs or output.



### Exercise 2: Code chunks in `Quarto`

1. Download the `R Markdown` cheat sheet, see `R Studio` menu `Help` -> `Cheat Sheets` -> `R Markdown Cheat Sheet`. Read the section about code chunks, see the section on page 1, bottom left with header "Embed Code with knitr".
2. Consider the code chunk below. It contains `R` code that asks for the summary statistics of the `cars` data. 
3. You can run the code in two ways:
  - Line by line: select the line you want to run and use Ctrl + Enter (Windows/Linux) or Cmd + Return (Mac)
  - Run the code by clicking on the green "play" button in the top right corner of the code chunk. This will execute all the code in the code chunk.

Do you obtain the summary statistics?

```{r eval = FALSE}
summary(cars)
```

4. Add a new code chunk (use the code chunk icon on top of this editor pane) to this document. Copy the `R` code that asks for a summary of the `cars` data in this new code chunk. Adapt the code chunk in such a way that only the summary statistics (the results) will be displayed in the knitted HTML document. Knit the document and verify the results.


### Exercise 3: Learning some `R` code.

Have a look at the following code chunk with `R` code:
```{r eval = FALSE}
a <- 100
```

The `#` tells `R` that everything that follows in that specific line is not to be considered as code. In other words, you can use `#` to comment in your own `R`-scripts. I used `#` here to elaborate that the following line is the code from exercise 3.

The line `a <- 100` assigns the value `100` to object `a`. When reading that code say: "a gets value 100" in your head. When you run your code, it will be saved.

Even if `<-` is a pain to type, don't use `=` instead, it will work, but it will cause confusion later. Use `RStudio`'s keyboard shortcut: Alt/Option + - (the minus sign). Notice that `RStudio` automatically surrounds `<-` with spaces (good code formatting practice).

**Create an object a with element (value) `1`**
```{r}
# type your code here

```

**Verify that 1 is stored in `a`**
```{r}
# type your code here

```

**Square `a` (in a new code chunk)** 
```{r}
# type your code here

```

**Create `b` and assign `a+a` to `b`. Check if `b` is indeed `a+a`.**
```{r}
# type your code here

```


### Exercise 3: Inspect the contents of the global environment by typing and running `ls()`

The following is returned by `R`

```{r}
ls()
```


A single value is the most basic object in `R`. The next step up in objects is a vector, followed by a matrix, followed by an array. Eventually, each of these objects can be stored in a list. We will learn about vectors, matrices and arrays later today.

Now you know how to use `R` as a calculator and `R-Studio` with `Quarto` as a typesetting and storytelling device. 

## Practical 2

### Exercise 1-5

------------------------------------------------------------------------

1.  **Make two vectors: one named `vec1` with values 1 through 6 and one named `vec2` with letters A through F.**

```{r}

```



2.  **Create two matrices, one from `vec1` and one from `vec2`. The dimensions for both matrices are 3 rows by 2 columns. Find the function to create a matrix by typing `?matrix`**. Notice that when you start typing `?matrix` in the code chunk, a pop-up window appears with information about the function.

```{r}

```

To create a matrix we used `matrix()`. For a matrix we need to specify the dimensions (in this case 3 rows and 2 columns) and the input (in this case `vec1` or `vec2`) needs to match these dimensions.

3.  **Inspect your vectors and matrices. Are all numerical?**

```{r}

```

4.  **Make a matrix from both `vec1` and `vec2` with 6 rows and 2 columns. Inspect this matrix.**

```{r}

```

If one or more elements in the matrix represent characters, all other elements are also converted to characters. A matrix is just for either numeric or character elements. Notice that the second approach (the column bind approach from `mat3b`) returns a matrix where the column names are already set to the name of the bound objects.

To solve the problem of numbers represented as characters we can create a dataframe. A dataframe is essentially a matrix that allows for character elements. The use of a dataframe is often preferred over the use of a matrix in `R`, except for purposes where pure numerical calculations are done, such as in matrix algebra. However, most datasets do contain character information and a dataframe would normally be your preferred choice when working with your own collected datasets in R.


5.  **Make a dataframe called `dat3` where `vec1` and `vec2` are both columns. Name the columns `V1` and `V2`, respectively. Use function `data.frame()`.**

```{r}

```

------------------------------------------------------------------------

### Exercise 6-10

------------------------------------------------------------------------

6. **A useful function to check the properties of any R object is the `str()` function. Try this function on `dat3`.**

You can inspect the structure of a dataframe (or other R object) by using the `str()` function or by clicking on the object in the Environment tab in `RStudio`, which unfolds the properties of each element. See:

<center><img src="images/mt1/Structure_RObjects_Data_tab.png" alt="HTML5 Icon" width="65%"/></center>

Try both ways of inspecting the structure of `dat3`.

```{r}

```
Inspecting the structure of your data is vital, as you probably have imported your data from some other source. If we, at a later stage, start analyzing our data without the correct measurement level, we may run into problems. One problem that often occurs is that categorical variables (factors in `R`) are not coded as such.

------------------------------------------------------------------------

7.  **Select 1) the third row, 2) the second column and 3) the intersection of these two in the dataframe `dat3` that you have created in Question 4.**

```{r}

```

The `[3, 2]` index is very useful in 'R'. The first number (before the comma) represents the row and the second number (after the comma) represents the column. For a vector there are no two dimensions and only one dimension can be called. For example, `vec1[3]` would yield `3`. Try it.

Columns can also be called by the `$` sign, but only if a name has been assigned. With dataframes assigning names happens automatically.

8.  **Imagine that the first variable `V1` in our dataframe `dat3` is not coded correctly, but actually represents grouping information about cities. Convert the variable to a factor and add the labels Utrecht, New York, London, Singapore, Rome and Cape Town.**

```{r}

```

You can verify the changes with `str()` or by inspecting the object `dat3` in the RStudio Environment tab.

9. **Open the workspace `boys.RData`.**

There are two ways to go about opening workspaces that are available on the internet. You either need to download this [`boys.RData`](documents/mt1/boys.RData) file from the course page and put it in the project folder. Then run the below code

```{r eval = FALSE}
load("boys.RData")
```

or double-click the `boys.RData` file on your machine (right-click and `open with RStudio` if it does not open by default in `RStudio`, but in `R`).

Alternatively, you can import workspaces directly from the internet by running and loading a connection to a URL. For example, the following connection loads the `boys.RData` file from another course page:

```{r eval = TRUE}
con <- url("https://www.gerkovink.com/fundamentals/data/boys.RData")
load(con)
```

In the above code we store the connection in object `con` and then load the connection with `load(con)`. Be aware that if you store your code on multiple locations, it will burn carbon (energy) at multiple locations. Better is to have a central repository where you store your code and data. This is what working in Projects - which we discussed in Practical 1, facilitates. 

10. **Most packages have datasets included. Since we have not learned to load packages yet, you are presented with such a data set in a workspace. Open the `boys` dataset (it is from package `mice`, by the way) by typing `boys` in the console, and subsequently by using the function `View()`.**

The output is not displayed here as the data set is simply too large.

Using `View()` is preferred for inspecting datasets that are large. `View()` opens the dataset in a spreadsheet-like window (conform MS Excel, or SPSS). If you `View()` your own datasets, you can not edit the datasets' contents.

------------------------------------------------------------------------

### Exercise 11-15

------------------------------------------------------------------------

11. **Find out the dimensions of the `boys` data set and inspect the first and final 6 cases in the data set.**

To do it numerically, find out what the dimensions of the boys dataset are.

```{r}

```

Select the first and last six cases

```{r}

```

or, more efficiently:

```{r}
head(boys)
tail(boys)
```

The functions `head()` and `tail()` are very useful functions. For example, from looking at both functions we can observe that the data are very likely sorted based on `age`.


12. **Suppose you want to plot the height versus the weight of the boys.** You would like to have the weight variable (`wgt`) on the x-axis and the height variable (`hgt`) on the y-axis. How can you achieve such a plot? Tip: use the `args()` function.

A. `plot(boys$wgt, boys$hgt)`

B. `plot(boys$hgt, boys$wgt)`

C. `plot(x=boys$wgt, y=boys$hgt)`

D. `plot(y=boys$hgt, x=boys$wgt)`


```{r}
# look at the arguments structure in the function


```
Make the plot using the correct code.

```{r}

```
13. **It seems that the `boys` data are sorted based on `age`. Verify this.**

To verify if the data are indeed sorted, we can run the following command to test the complement of that statement. Remember that we can always search the help for functions: e.g. we could have searched here for `?sort` and we would quickly have ended up at function `is.unsorted()` as it tests whether an object is **not sorted**.

```{r}

```

which returns `FALSE`, indicating that boys' age is indeed sorted (we asked if it was unsorted!). To directly test if it is sorted, we could have used

```{r}
!is.unsorted(boys$age)
```

which tests if data data are not unsorted. In other words the values `TRUE` and `FALSE` under `is.unsorted()` turn into `FALSE` and `TRUE` under `!is.unsorted()`, respectively.

------------------------------------------------------------------------

14. **Inspect the `boys` dataset with `str()`. Use one or more functions to find distributional summary information (at least information about the minimum, the maximum, the mean and the median) for all of the variables. Give the standard deviation for `age` and `bmi`.** Tip: make use of the help (?) and help search (??) functionality in `R`.

```{r}

```

Note that `bmi` contains 21 missing values, e.g. by looking at the summary information. Therefor we need to use `na.rm = T` to calculate the standard deviation on the observed cases only.

------------------------------------------------------------------------

15. **Select all boys that are 20 years or older. How many are there?**

The logical operators (TRUE vs FALSE) are a very powerful tool in `R`. For example, we can just select the rows (respondents) in the data that are older than 20 by putting the logical operator within the row index of the dataset:

```{r}

```

or, alternatively using `subset()`,

```{r}
boys2.1 <- subset(boys, age >= 20)
nrow(boys2.1)
```

------------------------------------------------------------------------

### Exercise 16-17

------------------------------------------------------------------------

16. **Select all boys that are older than 19, but younger than 19.5. How many are there?**

```{r}

```

or, alternatively, use `subset()`.

```{r}

```

------------------------------------------------------------------------

17. **What is the mean age of boys younger than 15 years of age that do not live in region `north`?**

```{r}

```

or, alternatively,

```{r}
mean(subset(boys, age < 15 & reg != "north")$age, na.rm=TRUE)
```

The mean age is `r mean(boys$age[boys$age < 15 & boys$reg != "north" ], na.rm = TRUE)` years

------------------------------------------------------------------------

Today we have learned to use `R` at its basics. This offers tremendous flexibility, but may also be inefficient when our aim is some complex analysis, data operation of data manipulation. Doing advanced operations in basic `R` may require lots and lots of code. Tomorrow we will start using packages that allow us to do complicated operations with just a few lines of code.

As you start using `R` in your own research, you will find yourself in need of packages that are not part of the default `R` installation. The beauty of `R` is that its functionality is community-driven. People can add packages to `CRAN` that other people can use and improve. Chances are that a function and/or package has been already developed for the analysis or operation you plan to carry out. If not, you are of course welcome to fill the gap by submitting your own package.

------------------------------------------------------------------------

End of practicals
