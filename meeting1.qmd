# Introductie in R & RStudio {#sec-mt1}

---
subtitle: "Let's get started with a career in `R`"
author: 
  - name: "Gerko Vink"
    orcid: "0000-0001-9767-1924"
    email: g.vink@uu.nl
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
  - name: "Laurence Frank"
    orcid: "0000-0002-4075-8129"
    affiliations:
      - name: Methodology & Statistics @ Utrecht University
format:
  html:
    highlight-style: github
    number-sections: false
    toc: true
    toc-depth: 3
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

::: callout-tip
## Hoorcollege 2 juni 2025

We beginnen vandaag met `R` en `RStudio`. We zullen leren om deze software efficient te gebruiken en we gaan werken in projecten. Dit is belangrijk omdat een gestructureerde werkomgeving het mogelijk maakt om met anderen samen te werken aan hetzelfde project. We beginnen vandaag ook meteen met `storytelling` en zullen daar het publicatieplatform [`Quarto`]() voor gebruiken. De slides voor het hoorcollege kunt u [hier vinden](slides/lec-1.html).
:::

::: callout-note
## Lesstof

De volgende taken moeten voorafgaand het college voltooid zijn:

-   installeer [R](https://cran.r-project.org/)
-   installeer [RStudio](https://posit.co/download/rstudio-desktop/)
-   installeer [Quarto](https://quarto.org/) door onderstaande code in de `R` console te evalueren:

```{r eval = FALSE}
install.packages("quarto", dependencies = TRUE)
```
:::

## Practical 1

In this lab you will learn to work with Quarto files and RStudio Projects.

### Exercise 1. Create an R Project to organise your work

In this course you learn to work with RStudio Projects. This way of working ensures that your R code and your analyses will continue to work and are easy to share with collaborators.

1.  Create a folder on your computer where you will store all the materials of this course. Call it for example "Module_6". It is better to avoid spaces in the name of your folder; you can use underscore (\_) or Capitals to separate words.
2.  Open RStudio. The RStudio interface will probably look like this:

![](images/mt1/RStudioInterface.png){width="80%"}

3.  Create a new RStudio Project by selecting File -\> New Project. A new window pops up, choose the option "New Directory". Then create a folder "Module_6" in a directory of your choice. Click on "Create project". See the steps to create an R Project below. When you open a new RStudio Project, a new R session starts up and creates the project structure.

![](images/mt1/CreateRProjectSteps.png){width="100%"} <br>

**More information about RStudio Projects**

On the RStudio Support website [you can find a webpage explaining all you need to know about RStudio Projects](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects).

### Exercise 2. Working with RStudio and Quarto

#### Open a new Quarto file

To open a new file, click on the little green plus on the upper left part of the menu bar, and select Quarto, as in the image below. In the window that pops up, leave the settings as they are. You do not have to fill in a title yet.

![](images/mt1/OpenQuartoFile.png){width="40%"}

#### The structure of a Quarto file

Quarto uses Markdown. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. A Markdown file has three components:

-   On top of the document, a YAML part, which defines the markup of the document. YAML stands for "Yet Another Markup Language/ Ain't Markup Language".
-   A text part, where you can create plain text. This part of the document is white.
-   The code chunks, where you type R code (but you can also choose another programming language such as Python). Code chunks are grey coloured boxes.

#### Open the Markdown Quick Reference

To learn more about Quarto and to get help with the options, open the Markdown Quick Reference in RStudio, see menu Help -\> Markdown Quick Reference. This will open the reference document in the output pane in the tab "Help". Use the Quick Reference to do the following exercise.

### Exercise 3. Try a few options in Quarto

1.  When you open a new Quarto file, it contains some example code. Delete all the code from line 5 downwards.
2.  The first line of the document shows the word "title". Change the title of the document in the YAML part of the document into: `title: 'Practical 1'`. Please note that you have to use quotation marks.
3.  Save the Quarto file using File -\> Save. Because you created an R Project in exercise 1, the Quarto file will be saved automatically in the folder of the R Project.
4.  Fill in your name by adding `author: yourname` to the YAML header between the `title` and `format`.
5.  Add a Level 1 Header called "This is a level 1 header" to the document. See Markdown Quick Reference, Headers, for how to make headers.
6.  Add a Level 2 sub-header with name "This is a level 2 header".
7.  Add a code chunk by selecting the green button with "c" on the top right, see screenshot below:

![](images/mt1/InsertCodeChunk.png){width="30%"}

8.  Write some plain text and mark some part of the text bold and some other part of the text italic. In the Markdown Quick Reference, you see that you can make text italic or bold using either `*` or `_`. Do you have an idea why there are two options for making text bold or italic?
9.  Save your Quarto file.

After these steps, your Quarto file should look like this:

![](images/mt1/FirstQuartoDocument.png){width="90%"}

### Exercise 4: Knitting your Quarto file to HTML

Compile the Quarto file as a HTML file. Click on the `Render` icon. Verify how the headers look like and whether some part of the text is indeed in italic or bold.

Instead of rendering, it is also possible to get a preview by clicking on "Visual" in the left upper corner of the editor pane. Try both options.

### Exercise 5: Entering and running R commands

The **code chunks** are where you put R code in a Quarto file. So far, your “knitted” file (your output document HTML file) does not show any results from R code, because we did not use any code chunks yet.

1.  Add a code chunk by selecting the green button with "c" on the top right, see screenshot below:

![](images/mt1/InsertCodeChunk.png){width="30%"}

When you create a new code chunk you should notice that the code area is grey and that it starts and ends with three back ticks \`.

One common mistake is to accidentally delete these back ticks. Remember, code chunks are grey and text entry is white - if the colour of certain parts of your Markdown does not look right, check that you have not deleted the back ticks.

2.  Type the following command to create a new variable called `x` with the value of `8`, in this way: `x <- 8`.

The arrow `<-` is called an **assignment operator**, and tells R to save an object called x that has the value of 8.

Even if `<-` is a pain to type, don’t use `=` instead, it will work, but it will cause confusion later. Use RStudio’s keyboard shortcut: `Alt/Option` + `-` (the minus sign). Notice that RStudio automatically surrounds `<-` with spaces (good code formatting practice).

Your Quarto file should look like this now:

![](images/mt1/FirstQuartoDocument_2.png){width="70%"} **Running R commands**

To actually RUN this command, you have two options:

-   Click on the green triangle in the code chunk. Note: this will run **all** the code in the code chunk.

-   Highlight the code and hit Control-Enter on a PC or Command-Return on a Mac. This option allows you to run specific lines of code in a code chunk.

Think of “running” code in your console as telling R: “do this”.

3.  Run the command using one of these two options. Note that you now have a new object in your workspace (top right pane), called `x`.

4.  To look at the value of `x` (to get the value printed): add `x` in a new line of the code chunk, see below. Then run the code again. What happens?

```{r }
x <- 8
x 
```

5.  Compile the Quarto file again, using the Knit button and have a look at the result. It should look approximately like this:

![](images/mt1/HTMLversion_ExampleRMarkdown.png){width="70%"}

5.  Remove the object `x` from the workspace by typing `rm(x)` in the code chunk and run this line.

### Exercise 6: Customizing chunk options

You can customize the way your R code is displayed in the knitted html file. To do this for an individual code chunk, you have to add an option to the chunck header.

Some commonly used chunk header options are:

-   Show both R code and output. This is the default R code chunk setting.
-   Show the results, not the R code. Use `{r echo = FALSE}` in the code chunk header.
-   Do not show the R code, do not show the results. Use `{r include = FALSE}`

**Question**

Add a new code chunk to your Quarto file and type the code below in your code chunk. It creates a contour plot of the Maunga Whau volcano in New Zealand. Try a few options to control the output of your code chunk, such as `{r echo = FALSE}` or `{r include = FALSE}` and see what happens when you knit the your Quarto file.

```{r contourplot }
image(volcano)
```

See the [R Markdown Cheat Sheet](https://posit.co/wp-content/uploads/2022/10/rmarkdown-1.pdf) for a complete list of knitr chunk options.

### Closing RStudio Projects

When you want to **close your RStudio Project**, there are several options:

-   Quit RStudio using RStudio -\> Quit RStudio. This will close the RStudio application but keep the current RStudio Project active. This means that when you open RStudio the next time, it will automatically open with the current RStudio Project.

-   Close the RStudio Project using File -\> Close Project. This will only close the current RStudio Project, but it will not close the RStudio application.

Close the RStudio Project using the option where you close the RStudio Project, but keep the RStudio application open. A window will pop up asking you whether you want to save the workspace (this is the piece of memory where `x` with value 8 is located). Choose "do not save".

For more information about RStudio Projects, see the [RStudio Support page.](https://support.posit.co/hc/en-us/articles/200526207-Using-RStudio-Projects)

### End of Practical 1.

I suggest you continue with Practical 2. If in the end you have time left, play around with R and RStudio or do the advanced exercise.

::: callout-note
## Advanced exercise: Inline code

1.  Add a new code chunk to your document and type the following code but with your own information (name, age, country of residence, birthday). You can do this by copy the code below and paste it in the new code chunk. In the R language text values and dates need to be contained in quotation marks but numerical values do not.

```{r}
name <- "Karin" 
age <- 26
country <- "The Netherlands"
today <- Sys.Date()
birthday <- as.Date("2024-10-11")
```

2.  A Markdown file is convenient for combining code and text in the same document. When reporting the results of statistical analyses, you will need to refer to the statistics from your analyses. This can be done in Quarto using inline code. Let’s use the information from your code chunk to demonstrate how inline code works. Copy and paste this text exactly (do not change anything) to **the white space** underneath your code chunk (not in the code chunk!):

```{r eval=FALSE}
My name is `r name` and I am `r age` years old. It is `r birthday - today` days until my birthday.
```

3.  Knit the document using `Render` and look at the result. It should look like this, but then with your own name, country etc.: **My name is `r name` and I am `r age` years old. It is `r birthday - today` days until my birthday.**
:::

## Practical 2

## Exercise 1-5

---

 1. **Make two vectors: one named `vec1` with values 1 through 6 and one named `vec2` with letters A through F. **
```{r}
vec1 <- c(1, 2, 3, 4, 5, 6)
vec2 <- c("A", "B", "C", "D", "E", "F")
```

To create a vector we used `c()`, which stands for 'concatenation'. It is just a series of numbers or letters. 

---

 2. **Create two matrices, one from `vec1` and one from `vec2`. The dimensions for both matrices are 3 rows by 2 columns. **

```{r}
mat1 <- matrix(vec1, nrow = 3, ncol = 2)
mat2 <- matrix(vec2, nrow = 3, ncol = 2)
```

To create a matrix we used `matrix()`. For a matrix we need to specify the dimensions (in this case 3 rows and 2 columns) and the input (in this case `vec1` or `vec2`) needs to match these dimensions. 

---

3. **Inspect your vectors and matrices. Are all numerical?**

```{r}
vec1
vec2
mat1
mat2
```

`vec1` and `mat1` contain numbers and `vec2` and `mat2` contain characters. 

---

 4. **Make a matrix from both `vec1` and `vec2` with 6 rows and 2 columns. Inspect this matrix.**

```{r}
mat3 <- matrix(c(vec1, vec2), 6, 2)
mat3
```
or
```{r}
mat3b <- cbind(vec1, vec2)
is.matrix(mat3b)
mat3b
```


If one or more elements in the matrix represent characters, all other elements are also converted to characters. A matrix is just for either numeric or character elements. Notice that the second approach (the column bind approach from `mat3b`) returns a matrix where the column names are already set to the name of the bound objects. 

To solve the problem of charactered numbers we can create a dataframe. A dataframe is essentially a matrix that allows for character elements. The use of a dataframe is often preferred over the use of a matrix in `R`, except for purposes where pure numerical calculations are done, such as in matrix algebra. However, most datasets do contain character information and a dataframe would normally be your preferred choice when working with your own collected datasets in R. 

---

5. **Make a dataframe called `dat3` where `vec1` and `vec2` are both columns. Name the columns `V1` and `V2`, respectively. Use function `data.frame()`.**

```{r}
dat3 <- data.frame(V1 = vec1, V2 = vec2)
dat3
```

---

## Exercise 6-10

---

6. **Again, make a dataframe called `dat3b` where `vec1` and `vec2` are both columns. Name the columns `V1` and `V2`, respectively. Use function `as.data.frame()` on the matrix obtained from `Question 4`. **

This is a tricky situation. At face value, everything may seem to be in order. But, be aware that the code
```{r}
dat3b <- as.data.frame(mat3, stringsAsFactors = TRUE)
dat3b
```
does not work properly (at least not as intended) as the matrix nature of `mat3` turned everything into a character value and you have lost the numerical nature of `vec1`. It may appear to be working, but if we check if column 1 is numerical, it turns out not to be the case. 

---

7. **Check if the first column in the data frames from Question 4 and Question 5 are indeed numeric. If not, determine what they are. **

```{r}
is.numeric(dat3[, 1])
is.numeric(dat3b[, 1])
```
The first column in matrix `dat3b` obtained from Question 5 is indeed not numeric. As a matter of fact, it is also not a character variable.
```{r}
is.character(dat3b[, 1])
```
Rather tricky; the function `as.data.frame()` has converted the first variable to a factor. 
```{r}
is.factor(dat3b[, 1])
```
This is due to us not specifying the variable correctly in the matrix we used to create the dataframe. Factors are categorical variables that are depicted by numbers. Character vectors are not converted to factors in data frames by default, but the argument `stringsAsFactors = TRUE` has resulted in this conversion. I forced this to prove a point: You now know that there is a distinction between characters and factors and you know hot to force this conversion to factors in a data frame. 

---

8. **Select 1) the third row, 2) the second column and 3) the intersection of these two in the dataframe `dat3` that you have created in Question 4. **
```{r}
dat3[3, ] #3rd row
dat3[, 2] #2nd column
dat3$V2   #also 2nd column
dat3[3,2] #intersection
```

The `[3,2]` index is very useful in 'R'. The first number (before the comma) represents the row and the second number (after the comma) represents the column. For a vector there are no two dimensions and only one dimension can be called. For example, `vec1[3]` would yield `3`. Try it. 

Columns can also be called by the `$` sign, but only if a name has been assigned. With dataframes assigning names happens automatically. 

Note that `R` automatically reports the values the character column can take. This means that the column is indeed a factor (a categorical variable - as it is supposed to be). A useful function to inspect the structure of a dataframe is `str()`. Try running it. 

```{r}
str(dat3)
```

Inspecting the structure of your data is vital, as you probably have imported your data from some other source. If we, at a later stage, start analyzing our data without the correct measurement level, we may run into problems. One problem that often occurs is that categorical variables (factors in `R`) are not coded as such. 

---

9. **Imagine that the first variable `V1` in our dataframe `dat3` is not coded correctly, but actually represents grouping information about cities. Convert the variable to a factor and add the labels Utrecht, New York, London, Singapore, Rome and Cape Town.** 
```{r}
dat3$V1 <- factor(dat3$V1, labels = c("Utrecht", "New York", "London", "Singapore", "Rome", "Capetown"))
dat3
```

---

10. **Open the workspace `boys.RData`.** 

We have not yet learned to import data into `R`. Usually, we would store the data in our project and then import it from that location. For now, we load a dataset in from the internet by running and loading the connection
```{r eval = TRUE}
con <- url("https://www.gerkovink.com/fundamentals/data/boys.RData")
load(con)
```
In the above code we store the connection as a url character string in object `con` and then load the connection with `load(con)`.

The `boys` object will be added to your Global Environment. You can now use the `boys` data by running
```{r eval=FALSE}
boys
```

---

## Exercise 11-15

---

11. **Most packages have datasets included. Since we have not learned to load packages yet, you are presented with such a data set in a workspace. Open the `boys` dataset (it is from package `mice`, by the way) by typing `boys` in the console, and subsequently by using the function `View()`. **

The output is not displayed here as it is simply too large. 

Using `View()` is preferred for inspecting datasets that are large. `View()` opens the dataset in a spreadsheet-like window (conform MS Excel, or SPSS). If you `View()` your own datasets, you can not edit the datasets' contents. 

---

12. **Find out the dimensions of the `boys` data set and inspect the first and final 6 cases in the data set. **

To do it numerically, find out what the dimensions of the boys dataset are. 
```{r}
dim(boys)
```
There are 748 cases on 9 variables. To select the first and last six cases, use
```{r}
boys[1:6, ]
boys[743:748, ]
```
or, more efficiently:
```{r}
head(boys)
tail(boys)
```
The functions `head()` and `tail()` are very useful functions. For example, from looking at both functions we can observe that the data are very likely sorted based on `age`.

---

13. **It seems that the `boys` data are sorted based on `age`. Verify this.** 

To verify if the data are indeed sorted, we can run the following command to test the complement of that statement. Remember that we can always search the help for functions: e.g. we could have searched here for `?sort` and we would quickly have ended up at function `is.unsorted()` as it tests whether an object is **not sorted**. 

```{r}
is.unsorted(boys$age)
```
which returns `FALSE`, indicating that boys' age is indeed sorted (we asked if it was unsorted!). To directly test if it is sorted, we could have used
```{r}
!is.unsorted(boys$age)
```
which tests if data data are not unsorted. In other words the values `TRUE` and `FALSE` under `is.unsorted()` turn into `FALSE` and `TRUE` under `!is.unsorted()`, respectively. 

---

14. **Inspect the `boys` dataset with `str()`. Use one or more functions to find distributional summary information (at least information about the minimum, the maximum, the mean and the median) for all of the variables. Give the standard deviation for `age` and `bmi`. ** Tip: make use of the help (?) and help search (??) functionality in `R`. 

```{r}
str(boys)
summary(boys) #summary info
sd(boys$age) #standard deviation for age
sd(boys$bmi, na.rm = TRUE) #standard deviation for bmi
```

Note that `bmi` contains 21 missing values, e.g. by looking at the summary information. Therefor we need to use `na.rm = TRUE` to calculate the standard deviation on the observed cases only.

---

15. **Select all boys that are 20 years or older. How many are there?**

The logical operators (TRUE vs FALSE) are a very powerful tool in `R`. For example, we can just select the rows (respondents) in the data that are older than 20 by putting the logical operater within the row index of the dataset:
```{r}
boys2 <- boys[boys$age >= 20, ]
nrow(boys2)
```

or, alternatively, 
```{r}
boys2.1 <- subset(boys, age >= 20)
nrow(boys2.1)
```

---

## Exercise 16-17

---

16. **Select all boys that are older than 19, but younger than 19.5. How many are there?**
```{r}
boys3 <- boys[boys$age > 19 & boys$age < 19.5, ]
nrow(boys3)
```

or, alternatively, 
```{r}
boys3.2 <- subset(boys, age > 19 & age < 19.5)
nrow(boys3.2)
```

---

17. **What is the mean age of boys younger than 15 years of age that do not live in region `north`?**

```{r}
mean(boys$age[boys$age < 15 & boys$reg != "north" ], na.rm = TRUE)
```

or, alternatively, 
```{r}
mean(subset(boys, age < 15 & reg != "north")$age, na.rm=TRUE)
```

The mean age is `r mean(boys$age[boys$age < 15 & boys$reg != "north" ], na.rm = TRUE)` years

--- 

Today we have learned to use `R` at its basics. This offers tremendous flexibility, but may also be inefficient when our aim is some complex analysis, data operation of data manipulation. Doing advanced operations in basic `R` may require lots and lots of code. Tomorrow we will start using packages that allow us to do complicated operations with just a few lines of code. 

As you start using `R` in your own research, you will find yourself in need of packages that are not part of the default `R` installation. The beauty of `R` is that its functionality is community-driven. People can add packages to `CRAN` that other people can use and improve. Chances are that a function and/or package has been already developed for the analysis or operation you plan to carry out. If not, you are of course welcome to fill the gap by submitting your own package. 

---

End of practical